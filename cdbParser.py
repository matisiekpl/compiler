# Generated from .\cdb.antl4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0088")
        buf.write("\u048f\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\3\2\3\2\3\2\6\2\u00c4\n\2\r\2\16\2\u00c5\3")
        buf.write("\2\3\2\3\2\3\2\3\2\3\2\5\2\u00ce\n\2\3\2\3\2\3\2\3\2\3")
        buf.write("\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2")
        buf.write("\5\2\u00e2\n\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4")
        buf.write("\7\4\u00ee\n\4\f\4\16\4\u00f1\13\4\3\5\3\5\5\5\u00f5\n")
        buf.write("\5\3\5\3\5\3\5\3\6\3\6\5\6\u00fc\n\6\3\6\3\6\3\6\3\6\3")
        buf.write("\6\3\6\5\6\u0104\n\6\3\6\3\6\5\6\u0108\n\6\3\6\3\6\3\6")
        buf.write("\3\6\3\6\3\6\5\6\u0110\n\6\3\6\3\6\3\6\3\6\7\6\u0116\n")
        buf.write("\6\f\6\16\6\u0119\13\6\3\7\3\7\3\7\7\7\u011e\n\7\f\7\16")
        buf.write("\7\u0121\13\7\3\b\7\b\u0124\n\b\f\b\16\b\u0127\13\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u0134\n")
        buf.write("\b\3\t\3\t\3\n\5\n\u0139\n\n\3\n\3\n\3\n\3\n\3\n\3\n\3")
        buf.write("\n\5\n\u0142\n\n\3\13\3\13\3\13\7\13\u0147\n\13\f\13\16")
        buf.write("\13\u014a\13\13\3\f\3\f\3\f\7\f\u014f\n\f\f\f\16\f\u0152")
        buf.write("\13\f\3\r\3\r\3\r\7\r\u0157\n\r\f\r\16\r\u015a\13\r\3")
        buf.write("\16\3\16\3\16\7\16\u015f\n\16\f\16\16\16\u0162\13\16\3")
        buf.write("\17\3\17\3\17\7\17\u0167\n\17\f\17\16\17\u016a\13\17\3")
        buf.write("\20\3\20\3\20\7\20\u016f\n\20\f\20\16\20\u0172\13\20\3")
        buf.write("\21\3\21\3\21\7\21\u0177\n\21\f\21\16\21\u017a\13\21\3")
        buf.write("\22\3\22\3\22\7\22\u017f\n\22\f\22\16\22\u0182\13\22\3")
        buf.write("\23\3\23\3\23\7\23\u0187\n\23\f\23\16\23\u018a\13\23\3")
        buf.write("\24\3\24\3\24\7\24\u018f\n\24\f\24\16\24\u0192\13\24\3")
        buf.write("\25\3\25\3\25\3\25\3\25\3\25\5\25\u019a\n\25\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\5\26\u01a2\n\26\3\27\3\27\3\30\3")
        buf.write("\30\3\30\7\30\u01a9\n\30\f\30\16\30\u01ac\13\30\3\31\3")
        buf.write("\31\3\32\3\32\5\32\u01b2\n\32\3\32\3\32\3\32\5\32\u01b7")
        buf.write("\n\32\3\33\6\33\u01ba\n\33\r\33\16\33\u01bb\3\34\6\34")
        buf.write("\u01bf\n\34\r\34\16\34\u01c0\3\35\3\35\3\35\3\35\3\35")
        buf.write("\5\35\u01c8\n\35\3\36\3\36\3\36\7\36\u01cd\n\36\f\36\16")
        buf.write("\36\u01d0\13\36\3\37\3\37\3\37\5\37\u01d5\n\37\3 \3 \3")
        buf.write("!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u01e7\n!\3")
        buf.write("\"\3\"\5\"\u01eb\n\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u01f4")
        buf.write("\n\"\3#\3#\3$\6$\u01f9\n$\r$\16$\u01fa\3%\3%\3%\3%\3%")
        buf.write("\3%\3%\3%\5%\u0205\n%\3&\3&\5&\u0209\n&\3&\5&\u020c\n")
        buf.write("&\3\'\3\'\3\'\7\'\u0211\n\'\f\'\16\'\u0214\13\'\3(\3(")
        buf.write("\5(\u0218\n(\3(\3(\5(\u021c\n(\3)\3)\5)\u0220\n)\3)\3")
        buf.write(")\3)\5)\u0225\n)\3)\3)\3)\3)\5)\u022b\n)\3*\3*\3*\7*\u0230")
        buf.write("\n*\f*\16*\u0233\13*\3+\3+\3+\5+\u0238\n+\3,\3,\3-\3-")
        buf.write("\3-\3-\3-\3.\3.\3/\3/\3/\3/\3/\3/\5/\u0249\n/\3\60\3\60")
        buf.write("\3\60\3\60\5\60\u024f\n\60\3\60\3\60\3\61\5\61\u0254\n")
        buf.write("\61\3\61\3\61\7\61\u0258\n\61\f\61\16\61\u025b\13\61\3")
        buf.write("\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62")
        buf.write("\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u026e\n\62\3\62\3")
        buf.write("\62\3\62\5\62\u0273\n\62\3\62\5\62\u0276\n\62\3\62\3\62")
        buf.write("\3\62\3\62\3\62\5\62\u027d\n\62\3\62\3\62\3\62\3\62\3")
        buf.write("\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u028c")
        buf.write("\n\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62")
        buf.write("\5\62\u0298\n\62\3\62\7\62\u029b\n\62\f\62\16\62\u029e")
        buf.write("\13\62\3\63\3\63\3\64\3\64\3\64\6\64\u02a5\n\64\r\64\16")
        buf.write("\64\u02a6\3\64\3\64\5\64\u02ab\n\64\3\65\3\65\3\65\3\65")
        buf.write("\3\65\3\65\3\65\3\66\5\66\u02b5\n\66\3\66\3\66\5\66\u02b9")
        buf.write("\n\66\7\66\u02bb\n\66\f\66\16\66\u02be\13\66\3\67\3\67")
        buf.write("\3\67\5\67\u02c3\n\67\3\67\5\67\u02c6\n\67\38\38\38\3")
        buf.write("8\38\78\u02cd\n8\f8\168\u02d0\138\39\39\59\u02d4\n9\6")
        buf.write("9\u02d6\n9\r9\169\u02d7\3:\6:\u02db\n:\r:\16:\u02dc\3")
        buf.write(";\3;\3;\5;\u02e2\n;\3<\3<\3<\7<\u02e7\n<\f<\16<\u02ea")
        buf.write("\13<\3=\3=\3=\3=\3=\5=\u02f1\n=\5=\u02f3\n=\3>\3>\3>\7")
        buf.write(">\u02f8\n>\f>\16>\u02fb\13>\3?\3?\5?\u02ff\n?\3@\3@\5")
        buf.write("@\u0303\n@\3@\3@\7@\u0307\n@\f@\16@\u030a\13@\5@\u030c")
        buf.write("\n@\3A\3A\3A\3A\3A\7A\u0313\nA\fA\16A\u0316\13A\3A\3A")
        buf.write("\5A\u031a\nA\3A\5A\u031d\nA\3A\3A\3A\3A\5A\u0323\nA\3")
        buf.write("A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\5A\u0333\nA\3")
        buf.write("A\3A\7A\u0337\nA\fA\16A\u033a\13A\5A\u033c\nA\3A\3A\3")
        buf.write("A\5A\u0341\nA\3A\5A\u0344\nA\3A\3A\3A\3A\3A\5A\u034b\n")
        buf.write("A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\5")
        buf.write("A\u035e\nA\3A\3A\7A\u0362\nA\fA\16A\u0365\13A\7A\u0367")
        buf.write("\nA\fA\16A\u036a\13A\3B\3B\3C\3C\3C\3C\5C\u0372\nC\3C")
        buf.write("\3C\5C\u0376\nC\3D\5D\u0379\nD\3D\3D\3D\5D\u037e\nD\3")
        buf.write("D\7D\u0381\nD\fD\16D\u0384\13D\3E\3E\3E\3F\6F\u038a\n")
        buf.write("F\rF\16F\u038b\3G\3G\3G\3G\3G\3G\5G\u0394\nG\3H\3H\3H")
        buf.write("\3H\3H\6H\u039b\nH\rH\16H\u039c\3H\3H\3H\3I\3I\3I\3I\3")
        buf.write("I\3I\3I\3I\3J\3J\3J\3J\3J\3J\3J\3J\3K\3K\3K\3K\3K\3K\3")
        buf.write("K\3K\3L\3L\3L\3L\3L\3L\3M\3M\3M\7M\u03c3\nM\fM\16M\u03c6")
        buf.write("\13M\3N\3N\3N\7N\u03cb\nN\fN\16N\u03ce\13N\3O\3O\3O\7")
        buf.write("O\u03d3\nO\fO\16O\u03d6\13O\3P\3P\3P\3P\3P\3P\3P\3P\3")
        buf.write("P\3P\3P\3P\3P\3P\3P\3P\7P\u03e8\nP\fP\16P\u03eb\13P\5")
        buf.write("P\u03ed\nP\3P\3P\3P\3P\7P\u03f3\nP\fP\16P\u03f6\13P\5")
        buf.write("P\u03f8\nP\7P\u03fa\nP\fP\16P\u03fd\13P\3P\3P\5P\u0401")
        buf.write("\nP\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u040e\nQ\3R\3")
        buf.write("R\5R\u0412\nR\3R\3R\3S\6S\u0417\nS\rS\16S\u0418\3T\3T")
        buf.write("\5T\u041d\nT\3U\5U\u0420\nU\3U\3U\3V\3V\3V\3V\3V\3V\3")
        buf.write("V\5V\u042b\nV\3V\3V\3V\3V\3V\3V\5V\u0433\nV\3W\3W\3W\3")
        buf.write("W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\5W\u0449")
        buf.write("\nW\3X\3X\5X\u044d\nX\5X\u044f\nX\3X\3X\5X\u0453\nX\3")
        buf.write("X\3X\5X\u0457\nX\3Y\3Y\5Y\u045b\nY\3Z\3Z\3Z\7Z\u0460\n")
        buf.write("Z\fZ\16Z\u0463\13Z\3[\3[\3[\3[\3[\5[\u046a\n[\3[\3[\5")
        buf.write("[\u046e\n[\3[\3[\3\\\5\\\u0473\n\\\3\\\3\\\3]\6]\u0478")
        buf.write("\n]\r]\16]\u0479\3^\3^\3^\5^\u047f\n^\3_\5_\u0482\n_\3")
        buf.write("_\3_\5_\u0486\n_\3_\3_\3`\6`\u048b\n`\r`\16`\u048c\3`")
        buf.write("\2\4b\u0080a\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"")
        buf.write("$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz")
        buf.write("|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090")
        buf.write("\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2")
        buf.write("\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4")
        buf.write("\u00b6\u00b8\u00ba\u00bc\u00be\2\32\3\2xy\4\2ZZ\\\\\5")
        buf.write("\299ZZ\\\\\4\299DD\7\2YY[[]]``ef\3\2]_\4\2YY[[\3\2WX\3")
        buf.write("\2SV\3\2vw\3\2ku\b\2!!,,\64\64::==LL\n\2\6\b$$))--\62")
        buf.write("\63\678?@FG\3\2\6\b\4\2;;>>\6\2%%\65\65AAEE\5\2\n\13\61")
        buf.write("\61JJ\4\2\13\13\r\21\4\2MNjj\3\2MN\4\2]]dd\4\2\22\22\37")
        buf.write("\37\4\2  AA\4\2\"\"&&\2\u04ea\2\u00e1\3\2\2\2\4\u00e3")
        buf.write("\3\2\2\2\6\u00ea\3\2\2\2\b\u00f4\3\2\2\2\n\u0107\3\2\2")
        buf.write("\2\f\u011a\3\2\2\2\16\u0125\3\2\2\2\20\u0135\3\2\2\2\22")
        buf.write("\u0141\3\2\2\2\24\u0143\3\2\2\2\26\u014b\3\2\2\2\30\u0153")
        buf.write("\3\2\2\2\32\u015b\3\2\2\2\34\u0163\3\2\2\2\36\u016b\3")
        buf.write("\2\2\2 \u0173\3\2\2\2\"\u017b\3\2\2\2$\u0183\3\2\2\2&")
        buf.write("\u018b\3\2\2\2(\u0193\3\2\2\2*\u01a1\3\2\2\2,\u01a3\3")
        buf.write("\2\2\2.\u01a5\3\2\2\2\60\u01ad\3\2\2\2\62\u01b6\3\2\2")
        buf.write("\2\64\u01b9\3\2\2\2\66\u01be\3\2\2\28\u01c7\3\2\2\2:\u01c9")
        buf.write("\3\2\2\2<\u01d1\3\2\2\2>\u01d6\3\2\2\2@\u01e6\3\2\2\2")
        buf.write("B\u01f3\3\2\2\2D\u01f5\3\2\2\2F\u01f8\3\2\2\2H\u0204\3")
        buf.write("\2\2\2J\u0208\3\2\2\2L\u020d\3\2\2\2N\u021b\3\2\2\2P\u022a")
        buf.write("\3\2\2\2R\u022c\3\2\2\2T\u0234\3\2\2\2V\u0239\3\2\2\2")
        buf.write("X\u023b\3\2\2\2Z\u0240\3\2\2\2\\\u0248\3\2\2\2^\u024a")
        buf.write("\3\2\2\2`\u0253\3\2\2\2b\u026d\3\2\2\2d\u029f\3\2\2\2")
        buf.write("f\u02aa\3\2\2\2h\u02ac\3\2\2\2j\u02b4\3\2\2\2l\u02bf\3")
        buf.write("\2\2\2n\u02ce\3\2\2\2p\u02d5\3\2\2\2r\u02da\3\2\2\2t\u02de")
        buf.write("\3\2\2\2v\u02e3\3\2\2\2x\u02f2\3\2\2\2z\u02f4\3\2\2\2")
        buf.write("|\u02fc\3\2\2\2~\u030b\3\2\2\2\u0080\u033b\3\2\2\2\u0082")
        buf.write("\u036b\3\2\2\2\u0084\u0375\3\2\2\2\u0086\u0378\3\2\2\2")
        buf.write("\u0088\u0385\3\2\2\2\u008a\u0389\3\2\2\2\u008c\u0393\3")
        buf.write("\2\2\2\u008e\u0395\3\2\2\2\u0090\u03a1\3\2\2\2\u0092\u03a9")
        buf.write("\3\2\2\2\u0094\u03b1\3\2\2\2\u0096\u03b9\3\2\2\2\u0098")
        buf.write("\u03bf\3\2\2\2\u009a\u03c7\3\2\2\2\u009c\u03cf\3\2\2\2")
        buf.write("\u009e\u0400\3\2\2\2\u00a0\u040d\3\2\2\2\u00a2\u040f\3")
        buf.write("\2\2\2\u00a4\u0416\3\2\2\2\u00a6\u041c\3\2\2\2\u00a8\u041f")
        buf.write("\3\2\2\2\u00aa\u0432\3\2\2\2\u00ac\u0448\3\2\2\2\u00ae")
        buf.write("\u044e\3\2\2\2\u00b0\u0458\3\2\2\2\u00b2\u045c\3\2\2\2")
        buf.write("\u00b4\u046d\3\2\2\2\u00b6\u0472\3\2\2\2\u00b8\u0477\3")
        buf.write("\2\2\2\u00ba\u047e\3\2\2\2\u00bc\u0481\3\2\2\2\u00be\u048a")
        buf.write("\3\2\2\2\u00c0\u00e2\7{\2\2\u00c1\u00e2\7|\2\2\u00c2\u00c4")
        buf.write("\7~\2\2\u00c3\u00c2\3\2\2\2\u00c4\u00c5\3\2\2\2\u00c5")
        buf.write("\u00c3\3\2\2\2\u00c5\u00c6\3\2\2\2\u00c6\u00e2\3\2\2\2")
        buf.write("\u00c7\u00c8\7M\2\2\u00c8\u00c9\5.\30\2\u00c9\u00ca\7")
        buf.write("N\2\2\u00ca\u00e2\3\2\2\2\u00cb\u00e2\5\4\3\2\u00cc\u00ce")
        buf.write("\7\3\2\2\u00cd\u00cc\3\2\2\2\u00cd\u00ce\3\2\2\2\u00ce")
        buf.write("\u00cf\3\2\2\2\u00cf\u00d0\7M\2\2\u00d0\u00d1\5\u00a2")
        buf.write("R\2\u00d1\u00d2\7N\2\2\u00d2\u00e2\3\2\2\2\u00d3\u00d4")
        buf.write("\7\4\2\2\u00d4\u00d5\7M\2\2\u00d5\u00d6\5\16\b\2\u00d6")
        buf.write("\u00d7\7j\2\2\u00d7\u00d8\5|?\2\u00d8\u00d9\7N\2\2\u00d9")
        buf.write("\u00e2\3\2\2\2\u00da\u00db\7\5\2\2\u00db\u00dc\7M\2\2")
        buf.write("\u00dc\u00dd\5|?\2\u00dd\u00de\7j\2\2\u00de\u00df\5\16")
        buf.write("\b\2\u00df\u00e0\7N\2\2\u00e0\u00e2\3\2\2\2\u00e1\u00c0")
        buf.write("\3\2\2\2\u00e1\u00c1\3\2\2\2\u00e1\u00c3\3\2\2\2\u00e1")
        buf.write("\u00c7\3\2\2\2\u00e1\u00cb\3\2\2\2\u00e1\u00cd\3\2\2\2")
        buf.write("\u00e1\u00d3\3\2\2\2\u00e1\u00da\3\2\2\2\u00e2\3\3\2\2")
        buf.write("\2\u00e3\u00e4\7H\2\2\u00e4\u00e5\7M\2\2\u00e5\u00e6\5")
        buf.write("*\26\2\u00e6\u00e7\7j\2\2\u00e7\u00e8\5\6\4\2\u00e8\u00e9")
        buf.write("\7N\2\2\u00e9\5\3\2\2\2\u00ea\u00ef\5\b\5\2\u00eb\u00ec")
        buf.write("\7j\2\2\u00ec\u00ee\5\b\5\2\u00ed\u00eb\3\2\2\2\u00ee")
        buf.write("\u00f1\3\2\2\2\u00ef\u00ed\3\2\2\2\u00ef\u00f0\3\2\2\2")
        buf.write("\u00f0\7\3\2\2\2\u00f1\u00ef\3\2\2\2\u00f2\u00f5\5|?\2")
        buf.write("\u00f3\u00f5\7\'\2\2\u00f4\u00f2\3\2\2\2\u00f4\u00f3\3")
        buf.write("\2\2\2\u00f5\u00f6\3\2\2\2\u00f6\u00f7\7h\2\2\u00f7\u00f8")
        buf.write("\5*\26\2\u00f8\t\3\2\2\2\u00f9\u0108\5\2\2\2\u00fa\u00fc")
        buf.write("\7\3\2\2\u00fb\u00fa\3\2\2\2\u00fb\u00fc\3\2\2\2\u00fc")
        buf.write("\u00fd\3\2\2\2\u00fd\u00fe\7M\2\2\u00fe\u00ff\5|?\2\u00ff")
        buf.write("\u0100\7N\2\2\u0100\u0101\7Q\2\2\u0101\u0103\5\u0086D")
        buf.write("\2\u0102\u0104\7j\2\2\u0103\u0102\3\2\2\2\u0103\u0104")
        buf.write("\3\2\2\2\u0104\u0105\3\2\2\2\u0105\u0106\7R\2\2\u0106")
        buf.write("\u0108\3\2\2\2\u0107\u00f9\3\2\2\2\u0107\u00fb\3\2\2\2")
        buf.write("\u0108\u0117\3\2\2\2\u0109\u010a\7O\2\2\u010a\u010b\5")
        buf.write(".\30\2\u010b\u010c\7P\2\2\u010c\u0116\3\2\2\2\u010d\u010f")
        buf.write("\7M\2\2\u010e\u0110\5\f\7\2\u010f\u010e\3\2\2\2\u010f")
        buf.write("\u0110\3\2\2\2\u0110\u0111\3\2\2\2\u0111\u0116\7N\2\2")
        buf.write("\u0112\u0113\t\2\2\2\u0113\u0116\7{\2\2\u0114\u0116\t")
        buf.write("\3\2\2\u0115\u0109\3\2\2\2\u0115\u010d\3\2\2\2\u0115\u0112")
        buf.write("\3\2\2\2\u0115\u0114\3\2\2\2\u0116\u0119\3\2\2\2\u0117")
        buf.write("\u0115\3\2\2\2\u0117\u0118\3\2\2\2\u0118\13\3\2\2\2\u0119")
        buf.write("\u0117\3\2\2\2\u011a\u011f\5*\26\2\u011b\u011c\7j\2\2")
        buf.write("\u011c\u011e\5*\26\2\u011d\u011b\3\2\2\2\u011e\u0121\3")
        buf.write("\2\2\2\u011f\u011d\3\2\2\2\u011f\u0120\3\2\2\2\u0120\r")
        buf.write("\3\2\2\2\u0121\u011f\3\2\2\2\u0122\u0124\t\4\2\2\u0123")
        buf.write("\u0122\3\2\2\2\u0124\u0127\3\2\2\2\u0125\u0123\3\2\2\2")
        buf.write("\u0125\u0126\3\2\2\2\u0126\u0133\3\2\2\2\u0127\u0125\3")
        buf.write("\2\2\2\u0128\u0134\5\n\6\2\u0129\u012a\5\20\t\2\u012a")
        buf.write("\u012b\5\22\n\2\u012b\u0134\3\2\2\2\u012c\u012d\t\5\2")
        buf.write("\2\u012d\u012e\7M\2\2\u012e\u012f\5|?\2\u012f\u0130\7")
        buf.write("N\2\2\u0130\u0134\3\2\2\2\u0131\u0132\7b\2\2\u0132\u0134")
        buf.write("\7{\2\2\u0133\u0128\3\2\2\2\u0133\u0129\3\2\2\2\u0133")
        buf.write("\u012c\3\2\2\2\u0133\u0131\3\2\2\2\u0134\17\3\2\2\2\u0135")
        buf.write("\u0136\t\6\2\2\u0136\21\3\2\2\2\u0137\u0139\7\3\2\2\u0138")
        buf.write("\u0137\3\2\2\2\u0138\u0139\3\2\2\2\u0139\u013a\3\2\2\2")
        buf.write("\u013a\u013b\7M\2\2\u013b\u013c\5|?\2\u013c\u013d\7N\2")
        buf.write("\2\u013d\u013e\5\22\n\2\u013e\u0142\3\2\2\2\u013f\u0142")
        buf.write("\5\16\b\2\u0140\u0142\7}\2\2\u0141\u0138\3\2\2\2\u0141")
        buf.write("\u013f\3\2\2\2\u0141\u0140\3\2\2\2\u0142\23\3\2\2\2\u0143")
        buf.write("\u0148\5\22\n\2\u0144\u0145\t\7\2\2\u0145\u0147\5\22\n")
        buf.write("\2\u0146\u0144\3\2\2\2\u0147\u014a\3\2\2\2\u0148\u0146")
        buf.write("\3\2\2\2\u0148\u0149\3\2\2\2\u0149\25\3\2\2\2\u014a\u0148")
        buf.write("\3\2\2\2\u014b\u0150\5\24\13\2\u014c\u014d\t\b\2\2\u014d")
        buf.write("\u014f\5\24\13\2\u014e\u014c\3\2\2\2\u014f\u0152\3\2\2")
        buf.write("\2\u0150\u014e\3\2\2\2\u0150\u0151\3\2\2\2\u0151\27\3")
        buf.write("\2\2\2\u0152\u0150\3\2\2\2\u0153\u0158\5\26\f\2\u0154")
        buf.write("\u0155\t\t\2\2\u0155\u0157\5\26\f\2\u0156\u0154\3\2\2")
        buf.write("\2\u0157\u015a\3\2\2\2\u0158\u0156\3\2\2\2\u0158\u0159")
        buf.write("\3\2\2\2\u0159\31\3\2\2\2\u015a\u0158\3\2\2\2\u015b\u0160")
        buf.write("\5\30\r\2\u015c\u015d\t\n\2\2\u015d\u015f\5\30\r\2\u015e")
        buf.write("\u015c\3\2\2\2\u015f\u0162\3\2\2\2\u0160\u015e\3\2\2\2")
        buf.write("\u0160\u0161\3\2\2\2\u0161\33\3\2\2\2\u0162\u0160\3\2")
        buf.write("\2\2\u0163\u0168\5\32\16\2\u0164\u0165\t\13\2\2\u0165")
        buf.write("\u0167\5\32\16\2\u0166\u0164\3\2\2\2\u0167\u016a\3\2\2")
        buf.write("\2\u0168\u0166\3\2\2\2\u0168\u0169\3\2\2\2\u0169\35\3")
        buf.write("\2\2\2\u016a\u0168\3\2\2\2\u016b\u0170\5\34\17\2\u016c")
        buf.write("\u016d\7`\2\2\u016d\u016f\5\34\17\2\u016e\u016c\3\2\2")
        buf.write("\2\u016f\u0172\3\2\2\2\u0170\u016e\3\2\2\2\u0170\u0171")
        buf.write("\3\2\2\2\u0171\37\3\2\2\2\u0172\u0170\3\2\2\2\u0173\u0178")
        buf.write("\5\36\20\2\u0174\u0175\7d\2\2\u0175\u0177\5\36\20\2\u0176")
        buf.write("\u0174\3\2\2\2\u0177\u017a\3\2\2\2\u0178\u0176\3\2\2\2")
        buf.write("\u0178\u0179\3\2\2\2\u0179!\3\2\2\2\u017a\u0178\3\2\2")
        buf.write("\2\u017b\u0180\5 \21\2\u017c\u017d\7a\2\2\u017d\u017f")
        buf.write("\5 \21\2\u017e\u017c\3\2\2\2\u017f\u0182\3\2\2\2\u0180")
        buf.write("\u017e\3\2\2\2\u0180\u0181\3\2\2\2\u0181#\3\2\2\2\u0182")
        buf.write("\u0180\3\2\2\2\u0183\u0188\5\"\22\2\u0184\u0185\7b\2\2")
        buf.write("\u0185\u0187\5\"\22\2\u0186\u0184\3\2\2\2\u0187\u018a")
        buf.write("\3\2\2\2\u0188\u0186\3\2\2\2\u0188\u0189\3\2\2\2\u0189")
        buf.write("%\3\2\2\2\u018a\u0188\3\2\2\2\u018b\u0190\5$\23\2\u018c")
        buf.write("\u018d\7c\2\2\u018d\u018f\5$\23\2\u018e\u018c\3\2\2\2")
        buf.write("\u018f\u0192\3\2\2\2\u0190\u018e\3\2\2\2\u0190\u0191\3")
        buf.write("\2\2\2\u0191\'\3\2\2\2\u0192\u0190\3\2\2\2\u0193\u0199")
        buf.write("\5&\24\2\u0194\u0195\7g\2\2\u0195\u0196\5.\30\2\u0196")
        buf.write("\u0197\7h\2\2\u0197\u0198\5(\25\2\u0198\u019a\3\2\2\2")
        buf.write("\u0199\u0194\3\2\2\2\u0199\u019a\3\2\2\2\u019a)\3\2\2")
        buf.write("\2\u019b\u01a2\5(\25\2\u019c\u019d\5\16\b\2\u019d\u019e")
        buf.write("\5,\27\2\u019e\u019f\5*\26\2\u019f\u01a2\3\2\2\2\u01a0")
        buf.write("\u01a2\7}\2\2\u01a1\u019b\3\2\2\2\u01a1\u019c\3\2\2\2")
        buf.write("\u01a1\u01a0\3\2\2\2\u01a2+\3\2\2\2\u01a3\u01a4\t\f\2")
        buf.write("\2\u01a4-\3\2\2\2\u01a5\u01aa\5*\26\2\u01a6\u01a7\7j\2")
        buf.write("\2\u01a7\u01a9\5*\26\2\u01a8\u01a6\3\2\2\2\u01a9\u01ac")
        buf.write("\3\2\2\2\u01aa\u01a8\3\2\2\2\u01aa\u01ab\3\2\2\2\u01ab")
        buf.write("/\3\2\2\2\u01ac\u01aa\3\2\2\2\u01ad\u01ae\5(\25\2\u01ae")
        buf.write("\61\3\2\2\2\u01af\u01b1\5\64\33\2\u01b0\u01b2\5:\36\2")
        buf.write("\u01b1\u01b0\3\2\2\2\u01b1\u01b2\3\2\2\2\u01b2\u01b3\3")
        buf.write("\2\2\2\u01b3\u01b4\7i\2\2\u01b4\u01b7\3\2\2\2\u01b5\u01b7")
        buf.write("\5\u008eH\2\u01b6\u01af\3\2\2\2\u01b6\u01b5\3\2\2\2\u01b7")
        buf.write("\63\3\2\2\2\u01b8\u01ba\58\35\2\u01b9\u01b8\3\2\2\2\u01ba")
        buf.write("\u01bb\3\2\2\2\u01bb\u01b9\3\2\2\2\u01bb\u01bc\3\2\2\2")
        buf.write("\u01bc\65\3\2\2\2\u01bd\u01bf\58\35\2\u01be\u01bd\3\2")
        buf.write("\2\2\u01bf\u01c0\3\2\2\2\u01c0\u01be\3\2\2\2\u01c0\u01c1")
        buf.write("\3\2\2\2\u01c1\67\3\2\2\2\u01c2\u01c8\5> \2\u01c3\u01c8")
        buf.write("\5@!\2\u01c4\u01c8\5Z.\2\u01c5\u01c8\5\\/\2\u01c6\u01c8")
        buf.write("\5^\60\2\u01c7\u01c2\3\2\2\2\u01c7\u01c3\3\2\2\2\u01c7")
        buf.write("\u01c4\3\2\2\2\u01c7\u01c5\3\2\2\2\u01c7\u01c6\3\2\2\2")
        buf.write("\u01c89\3\2\2\2\u01c9\u01ce\5<\37\2\u01ca\u01cb\7j\2\2")
        buf.write("\u01cb\u01cd\5<\37\2\u01cc\u01ca\3\2\2\2\u01cd\u01d0\3")
        buf.write("\2\2\2\u01ce\u01cc\3\2\2\2\u01ce\u01cf\3\2\2\2\u01cf;")
        buf.write("\3\2\2\2\u01d0\u01ce\3\2\2\2\u01d1\u01d4\5`\61\2\u01d2")
        buf.write("\u01d3\7k\2\2\u01d3\u01d5\5\u0084C\2\u01d4\u01d2\3\2\2")
        buf.write("\2\u01d4\u01d5\3\2\2\2\u01d5=\3\2\2\2\u01d6\u01d7\t\r")
        buf.write("\2\2\u01d7?\3\2\2\2\u01d8\u01e7\t\16\2\2\u01d9\u01da\7")
        buf.write("\3\2\2\u01da\u01db\7M\2\2\u01db\u01dc\t\17\2\2\u01dc\u01e7")
        buf.write("\7N\2\2\u01dd\u01e7\5X-\2\u01de\u01e7\5B\"\2\u01df\u01e7")
        buf.write("\5P)\2\u01e0\u01e7\5\u0082B\2\u01e1\u01e2\7\t\2\2\u01e2")
        buf.write("\u01e3\7M\2\2\u01e3\u01e4\5\60\31\2\u01e4\u01e5\7N\2\2")
        buf.write("\u01e5\u01e7\3\2\2\2\u01e6\u01d8\3\2\2\2\u01e6\u01d9\3")
        buf.write("\2\2\2\u01e6\u01dd\3\2\2\2\u01e6\u01de\3\2\2\2\u01e6\u01df")
        buf.write("\3\2\2\2\u01e6\u01e0\3\2\2\2\u01e6\u01e1\3\2\2\2\u01e7")
        buf.write("A\3\2\2\2\u01e8\u01ea\5D#\2\u01e9\u01eb\7{\2\2\u01ea\u01e9")
        buf.write("\3\2\2\2\u01ea\u01eb\3\2\2\2\u01eb\u01ec\3\2\2\2\u01ec")
        buf.write("\u01ed\7Q\2\2\u01ed\u01ee\5F$\2\u01ee\u01ef\7R\2\2\u01ef")
        buf.write("\u01f4\3\2\2\2\u01f0\u01f1\5D#\2\u01f1\u01f2\7{\2\2\u01f2")
        buf.write("\u01f4\3\2\2\2\u01f3\u01e8\3\2\2\2\u01f3\u01f0\3\2\2\2")
        buf.write("\u01f4C\3\2\2\2\u01f5\u01f6\t\20\2\2\u01f6E\3\2\2\2\u01f7")
        buf.write("\u01f9\5H%\2\u01f8\u01f7\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa")
        buf.write("\u01f8\3\2\2\2\u01fa\u01fb\3\2\2\2\u01fbG\3\2\2\2\u01fc")
        buf.write("\u01fd\5J&\2\u01fd\u01fe\5L\'\2\u01fe\u01ff\7i\2\2\u01ff")
        buf.write("\u0205\3\2\2\2\u0200\u0201\5J&\2\u0201\u0202\7i\2\2\u0202")
        buf.write("\u0205\3\2\2\2\u0203\u0205\5\u008eH\2\u0204\u01fc\3\2")
        buf.write("\2\2\u0204\u0200\3\2\2\2\u0204\u0203\3\2\2\2\u0205I\3")
        buf.write("\2\2\2\u0206\u0209\5@!\2\u0207\u0209\5Z.\2\u0208\u0206")
        buf.write("\3\2\2\2\u0208\u0207\3\2\2\2\u0209\u020b\3\2\2\2\u020a")
        buf.write("\u020c\5J&\2\u020b\u020a\3\2\2\2\u020b\u020c\3\2\2\2\u020c")
        buf.write("K\3\2\2\2\u020d\u0212\5N(\2\u020e\u020f\7j\2\2\u020f\u0211")
        buf.write("\5N(\2\u0210\u020e\3\2\2\2\u0211\u0214\3\2\2\2\u0212\u0210")
        buf.write("\3\2\2\2\u0212\u0213\3\2\2\2\u0213M\3\2\2\2\u0214\u0212")
        buf.write("\3\2\2\2\u0215\u021c\5`\61\2\u0216\u0218\5`\61\2\u0217")
        buf.write("\u0216\3\2\2\2\u0217\u0218\3\2\2\2\u0218\u0219\3\2\2\2")
        buf.write("\u0219\u021a\7h\2\2\u021a\u021c\5\60\31\2\u021b\u0215")
        buf.write("\3\2\2\2\u021b\u0217\3\2\2\2\u021cO\3\2\2\2\u021d\u021f")
        buf.write("\7+\2\2\u021e\u0220\7{\2\2\u021f\u021e\3\2\2\2\u021f\u0220")
        buf.write("\3\2\2\2\u0220\u0221\3\2\2\2\u0221\u0222\7Q\2\2\u0222")
        buf.write("\u0224\5R*\2\u0223\u0225\7j\2\2\u0224\u0223\3\2\2\2\u0224")
        buf.write("\u0225\3\2\2\2\u0225\u0226\3\2\2\2\u0226\u0227\7R\2\2")
        buf.write("\u0227\u022b\3\2\2\2\u0228\u0229\7+\2\2\u0229\u022b\7")
        buf.write("{\2\2\u022a\u021d\3\2\2\2\u022a\u0228\3\2\2\2\u022bQ\3")
        buf.write("\2\2\2\u022c\u0231\5T+\2\u022d\u022e\7j\2\2\u022e\u0230")
        buf.write("\5T+\2\u022f\u022d\3\2\2\2\u0230\u0233\3\2\2\2\u0231\u022f")
        buf.write("\3\2\2\2\u0231\u0232\3\2\2\2\u0232S\3\2\2\2\u0233\u0231")
        buf.write("\3\2\2\2\u0234\u0237\5V,\2\u0235\u0236\7k\2\2\u0236\u0238")
        buf.write("\5\60\31\2\u0237\u0235\3\2\2\2\u0237\u0238\3\2\2\2\u0238")
        buf.write("U\3\2\2\2\u0239\u023a\7{\2\2\u023aW\3\2\2\2\u023b\u023c")
        buf.write("\7E\2\2\u023c\u023d\7M\2\2\u023d\u023e\5|?\2\u023e\u023f")
        buf.write("\7N\2\2\u023fY\3\2\2\2\u0240\u0241\t\21\2\2\u0241[\3\2")
        buf.write("\2\2\u0242\u0249\t\22\2\2\u0243\u0249\5h\65\2\u0244\u0245")
        buf.write("\7\f\2\2\u0245\u0246\7M\2\2\u0246\u0247\7{\2\2\u0247\u0249")
        buf.write("\7N\2\2\u0248\u0242\3\2\2\2\u0248\u0243\3\2\2\2\u0248")
        buf.write("\u0244\3\2\2\2\u0249]\3\2\2\2\u024a\u024b\7C\2\2\u024b")
        buf.write("\u024e\7M\2\2\u024c\u024f\5|?\2\u024d\u024f\5\60\31\2")
        buf.write("\u024e\u024c\3\2\2\2\u024e\u024d\3\2\2\2\u024f\u0250\3")
        buf.write("\2\2\2\u0250\u0251\7N\2\2\u0251_\3\2\2\2\u0252\u0254\5")
        buf.write("p9\2\u0253\u0252\3\2\2\2\u0253\u0254\3\2\2\2\u0254\u0255")
        buf.write("\3\2\2\2\u0255\u0259\5b\62\2\u0256\u0258\5f\64\2\u0257")
        buf.write("\u0256\3\2\2\2\u0258\u025b\3\2\2\2\u0259\u0257\3\2\2\2")
        buf.write("\u0259\u025a\3\2\2\2\u025aa\3\2\2\2\u025b\u0259\3\2\2")
        buf.write("\2\u025c\u025d\b\62\1\2\u025d\u026e\7{\2\2\u025e\u025f")
        buf.write("\7M\2\2\u025f\u0260\5`\61\2\u0260\u0261\7N\2\2\u0261\u026e")
        buf.write("\3\2\2\2\u0262\u0263\7{\2\2\u0263\u0264\7h\2\2\u0264\u026e")
        buf.write("\7}\2\2\u0265\u0266\5d\63\2\u0266\u0267\7{\2\2\u0267\u026e")
        buf.write("\3\2\2\2\u0268\u0269\7M\2\2\u0269\u026a\5d\63\2\u026a")
        buf.write("\u026b\5`\61\2\u026b\u026c\7N\2\2\u026c\u026e\3\2\2\2")
        buf.write("\u026d\u025c\3\2\2\2\u026d\u025e\3\2\2\2\u026d\u0262\3")
        buf.write("\2\2\2\u026d\u0265\3\2\2\2\u026d\u0268\3\2\2\2\u026e\u029c")
        buf.write("\3\2\2\2\u026f\u0270\f\13\2\2\u0270\u0272\7O\2\2\u0271")
        buf.write("\u0273\5r:\2\u0272\u0271\3\2\2\2\u0272\u0273\3\2\2\2\u0273")
        buf.write("\u0275\3\2\2\2\u0274\u0276\5*\26\2\u0275\u0274\3\2\2\2")
        buf.write("\u0275\u0276\3\2\2\2\u0276\u0277\3\2\2\2\u0277\u029b\7")
        buf.write("P\2\2\u0278\u0279\f\n\2\2\u0279\u027a\7O\2\2\u027a\u027c")
        buf.write("\7:\2\2\u027b\u027d\5r:\2\u027c\u027b\3\2\2\2\u027c\u027d")
        buf.write("\3\2\2\2\u027d\u027e\3\2\2\2\u027e\u027f\5*\26\2\u027f")
        buf.write("\u0280\7P\2\2\u0280\u029b\3\2\2\2\u0281\u0282\f\t\2\2")
        buf.write("\u0282\u0283\7O\2\2\u0283\u0284\5r:\2\u0284\u0285\7:\2")
        buf.write("\2\u0285\u0286\5*\26\2\u0286\u0287\7P\2\2\u0287\u029b")
        buf.write("\3\2\2\2\u0288\u0289\f\b\2\2\u0289\u028b\7O\2\2\u028a")
        buf.write("\u028c\5r:\2\u028b\u028a\3\2\2\2\u028b\u028c\3\2\2\2\u028c")
        buf.write("\u028d\3\2\2\2\u028d\u028e\7]\2\2\u028e\u029b\7P\2\2\u028f")
        buf.write("\u0290\f\7\2\2\u0290\u0291\7M\2\2\u0291\u0292\5t;\2\u0292")
        buf.write("\u0293\7N\2\2\u0293\u029b\3\2\2\2\u0294\u0295\f\6\2\2")
        buf.write("\u0295\u0297\7M\2\2\u0296\u0298\5z>\2\u0297\u0296\3\2")
        buf.write("\2\2\u0297\u0298\3\2\2\2\u0298\u0299\3\2\2\2\u0299\u029b")
        buf.write("\7N\2\2\u029a\u026f\3\2\2\2\u029a\u0278\3\2\2\2\u029a")
        buf.write("\u0281\3\2\2\2\u029a\u0288\3\2\2\2\u029a\u028f\3\2\2\2")
        buf.write("\u029a\u0294\3\2\2\2\u029b\u029e\3\2\2\2\u029c\u029a\3")
        buf.write("\2\2\2\u029c\u029d\3\2\2\2\u029dc\3\2\2\2\u029e\u029c")
        buf.write("\3\2\2\2\u029f\u02a0\t\23\2\2\u02a0e\3\2\2\2\u02a1\u02a2")
        buf.write("\7\22\2\2\u02a2\u02a4\7M\2\2\u02a3\u02a5\7~\2\2\u02a4")
        buf.write("\u02a3\3\2\2\2\u02a5\u02a6\3\2\2\2\u02a6\u02a4\3\2\2\2")
        buf.write("\u02a6\u02a7\3\2\2\2\u02a7\u02a8\3\2\2\2\u02a8\u02ab\7")
        buf.write("N\2\2\u02a9\u02ab\5h\65\2\u02aa\u02a1\3\2\2\2\u02aa\u02a9")
        buf.write("\3\2\2\2\u02abg\3\2\2\2\u02ac\u02ad\7\23\2\2\u02ad\u02ae")
        buf.write("\7M\2\2\u02ae\u02af\7M\2\2\u02af\u02b0\5j\66\2\u02b0\u02b1")
        buf.write("\7N\2\2\u02b1\u02b2\7N\2\2\u02b2i\3\2\2\2\u02b3\u02b5")
        buf.write("\5l\67\2\u02b4\u02b3\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5")
        buf.write("\u02bc\3\2\2\2\u02b6\u02b8\7j\2\2\u02b7\u02b9\5l\67\2")
        buf.write("\u02b8\u02b7\3\2\2\2\u02b8\u02b9\3\2\2\2\u02b9\u02bb\3")
        buf.write("\2\2\2\u02ba\u02b6\3\2\2\2\u02bb\u02be\3\2\2\2\u02bc\u02ba")
        buf.write("\3\2\2\2\u02bc\u02bd\3\2\2\2\u02bdk\3\2\2\2\u02be\u02bc")
        buf.write("\3\2\2\2\u02bf\u02c5\n\24\2\2\u02c0\u02c2\7M\2\2\u02c1")
        buf.write("\u02c3\5\f\7\2\u02c2\u02c1\3\2\2\2\u02c2\u02c3\3\2\2\2")
        buf.write("\u02c3\u02c4\3\2\2\2\u02c4\u02c6\7N\2\2\u02c5\u02c0\3")
        buf.write("\2\2\2\u02c5\u02c6\3\2\2\2\u02c6m\3\2\2\2\u02c7\u02cd")
        buf.write("\n\25\2\2\u02c8\u02c9\7M\2\2\u02c9\u02ca\5n8\2\u02ca\u02cb")
        buf.write("\7N\2\2\u02cb\u02cd\3\2\2\2\u02cc\u02c7\3\2\2\2\u02cc")
        buf.write("\u02c8\3\2\2\2\u02cd\u02d0\3\2\2\2\u02ce\u02cc\3\2\2\2")
        buf.write("\u02ce\u02cf\3\2\2\2\u02cfo\3\2\2\2\u02d0\u02ce\3\2\2")
        buf.write("\2\u02d1\u02d3\t\26\2\2\u02d2\u02d4\5r:\2\u02d3\u02d2")
        buf.write("\3\2\2\2\u02d3\u02d4\3\2\2\2\u02d4\u02d6\3\2\2\2\u02d5")
        buf.write("\u02d1\3\2\2\2\u02d6\u02d7\3\2\2\2\u02d7\u02d5\3\2\2\2")
        buf.write("\u02d7\u02d8\3\2\2\2\u02d8q\3\2\2\2\u02d9\u02db\5Z.\2")
        buf.write("\u02da\u02d9\3\2\2\2\u02db\u02dc\3\2\2\2\u02dc\u02da\3")
        buf.write("\2\2\2\u02dc\u02dd\3\2\2\2\u02dds\3\2\2\2\u02de\u02e1")
        buf.write("\5v<\2\u02df\u02e0\7j\2\2\u02e0\u02e2\7z\2\2\u02e1\u02df")
        buf.write("\3\2\2\2\u02e1\u02e2\3\2\2\2\u02e2u\3\2\2\2\u02e3\u02e8")
        buf.write("\5x=\2\u02e4\u02e5\7j\2\2\u02e5\u02e7\5x=\2\u02e6\u02e4")
        buf.write("\3\2\2\2\u02e7\u02ea\3\2\2\2\u02e8\u02e6\3\2\2\2\u02e8")
        buf.write("\u02e9\3\2\2\2\u02e9w\3\2\2\2\u02ea\u02e8\3\2\2\2\u02eb")
        buf.write("\u02ec\5\64\33\2\u02ec\u02ed\5`\61\2\u02ed\u02f3\3\2\2")
        buf.write("\2\u02ee\u02f0\5\66\34\2\u02ef\u02f1\5~@\2\u02f0\u02ef")
        buf.write("\3\2\2\2\u02f0\u02f1\3\2\2\2\u02f1\u02f3\3\2\2\2\u02f2")
        buf.write("\u02eb\3\2\2\2\u02f2\u02ee\3\2\2\2\u02f3y\3\2\2\2\u02f4")
        buf.write("\u02f9\7{\2\2\u02f5\u02f6\7j\2\2\u02f6\u02f8\7{\2\2\u02f7")
        buf.write("\u02f5\3\2\2\2\u02f8\u02fb\3\2\2\2\u02f9\u02f7\3\2\2\2")
        buf.write("\u02f9\u02fa\3\2\2\2\u02fa{\3\2\2\2\u02fb\u02f9\3\2\2")
        buf.write("\2\u02fc\u02fe\5J&\2\u02fd\u02ff\5~@\2\u02fe\u02fd\3\2")
        buf.write("\2\2\u02fe\u02ff\3\2\2\2\u02ff}\3\2\2\2\u0300\u030c\5")
        buf.write("p9\2\u0301\u0303\5p9\2\u0302\u0301\3\2\2\2\u0302\u0303")
        buf.write("\3\2\2\2\u0303\u0304\3\2\2\2\u0304\u0308\5\u0080A\2\u0305")
        buf.write("\u0307\5f\64\2\u0306\u0305\3\2\2\2\u0307\u030a\3\2\2\2")
        buf.write("\u0308\u0306\3\2\2\2\u0308\u0309\3\2\2\2\u0309\u030c\3")
        buf.write("\2\2\2\u030a\u0308\3\2\2\2\u030b\u0300\3\2\2\2\u030b\u0302")
        buf.write("\3\2\2\2\u030c\177\3\2\2\2\u030d\u030e\bA\1\2\u030e\u030f")
        buf.write("\7M\2\2\u030f\u0310\5~@\2\u0310\u0314\7N\2\2\u0311\u0313")
        buf.write("\5f\64\2\u0312\u0311\3\2\2\2\u0313\u0316\3\2\2\2\u0314")
        buf.write("\u0312\3\2\2\2\u0314\u0315\3\2\2\2\u0315\u033c\3\2\2\2")
        buf.write("\u0316\u0314\3\2\2\2\u0317\u0319\7O\2\2\u0318\u031a\5")
        buf.write("r:\2\u0319\u0318\3\2\2\2\u0319\u031a\3\2\2\2\u031a\u031c")
        buf.write("\3\2\2\2\u031b\u031d\5*\26\2\u031c\u031b\3\2\2\2\u031c")
        buf.write("\u031d\3\2\2\2\u031d\u031e\3\2\2\2\u031e\u033c\7P\2\2")
        buf.write("\u031f\u0320\7O\2\2\u0320\u0322\7:\2\2\u0321\u0323\5r")
        buf.write(":\2\u0322\u0321\3\2\2\2\u0322\u0323\3\2\2\2\u0323\u0324")
        buf.write("\3\2\2\2\u0324\u0325\5*\26\2\u0325\u0326\7P\2\2\u0326")
        buf.write("\u033c\3\2\2\2\u0327\u0328\7O\2\2\u0328\u0329\5r:\2\u0329")
        buf.write("\u032a\7:\2\2\u032a\u032b\5*\26\2\u032b\u032c\7P\2\2\u032c")
        buf.write("\u033c\3\2\2\2\u032d\u032e\7O\2\2\u032e\u032f\7]\2\2\u032f")
        buf.write("\u033c\7P\2\2\u0330\u0332\7M\2\2\u0331\u0333\5t;\2\u0332")
        buf.write("\u0331\3\2\2\2\u0332\u0333\3\2\2\2\u0333\u0334\3\2\2\2")
        buf.write("\u0334\u0338\7N\2\2\u0335\u0337\5f\64\2\u0336\u0335\3")
        buf.write("\2\2\2\u0337\u033a\3\2\2\2\u0338\u0336\3\2\2\2\u0338\u0339")
        buf.write("\3\2\2\2\u0339\u033c\3\2\2\2\u033a\u0338\3\2\2\2\u033b")
        buf.write("\u030d\3\2\2\2\u033b\u0317\3\2\2\2\u033b\u031f\3\2\2\2")
        buf.write("\u033b\u0327\3\2\2\2\u033b\u032d\3\2\2\2\u033b\u0330\3")
        buf.write("\2\2\2\u033c\u0368\3\2\2\2\u033d\u033e\f\7\2\2\u033e\u0340")
        buf.write("\7O\2\2\u033f\u0341\5r:\2\u0340\u033f\3\2\2\2\u0340\u0341")
        buf.write("\3\2\2\2\u0341\u0343\3\2\2\2\u0342\u0344\5*\26\2\u0343")
        buf.write("\u0342\3\2\2\2\u0343\u0344\3\2\2\2\u0344\u0345\3\2\2\2")
        buf.write("\u0345\u0367\7P\2\2\u0346\u0347\f\6\2\2\u0347\u0348\7")
        buf.write("O\2\2\u0348\u034a\7:\2\2\u0349\u034b\5r:\2\u034a\u0349")
        buf.write("\3\2\2\2\u034a\u034b\3\2\2\2\u034b\u034c\3\2\2\2\u034c")
        buf.write("\u034d\5*\26\2\u034d\u034e\7P\2\2\u034e\u0367\3\2\2\2")
        buf.write("\u034f\u0350\f\5\2\2\u0350\u0351\7O\2\2\u0351\u0352\5")
        buf.write("r:\2\u0352\u0353\7:\2\2\u0353\u0354\5*\26\2\u0354\u0355")
        buf.write("\7P\2\2\u0355\u0367\3\2\2\2\u0356\u0357\f\4\2\2\u0357")
        buf.write("\u0358\7O\2\2\u0358\u0359\7]\2\2\u0359\u0367\7P\2\2\u035a")
        buf.write("\u035b\f\3\2\2\u035b\u035d\7M\2\2\u035c\u035e\5t;\2\u035d")
        buf.write("\u035c\3\2\2\2\u035d\u035e\3\2\2\2\u035e\u035f\3\2\2\2")
        buf.write("\u035f\u0363\7N\2\2\u0360\u0362\5f\64\2\u0361\u0360\3")
        buf.write("\2\2\2\u0362\u0365\3\2\2\2\u0363\u0361\3\2\2\2\u0363\u0364")
        buf.write("\3\2\2\2\u0364\u0367\3\2\2\2\u0365\u0363\3\2\2\2\u0366")
        buf.write("\u033d\3\2\2\2\u0366\u0346\3\2\2\2\u0366\u034f\3\2\2\2")
        buf.write("\u0366\u0356\3\2\2\2\u0366\u035a\3\2\2\2\u0367\u036a\3")
        buf.write("\2\2\2\u0368\u0366\3\2\2\2\u0368\u0369\3\2\2\2\u0369\u0081")
        buf.write("\3\2\2\2\u036a\u0368\3\2\2\2\u036b\u036c\7{\2\2\u036c")
        buf.write("\u0083\3\2\2\2\u036d\u0376\5*\26\2\u036e\u036f\7Q\2\2")
        buf.write("\u036f\u0371\5\u0086D\2\u0370\u0372\7j\2\2\u0371\u0370")
        buf.write("\3\2\2\2\u0371\u0372\3\2\2\2\u0372\u0373\3\2\2\2\u0373")
        buf.write("\u0374\7R\2\2\u0374\u0376\3\2\2\2\u0375\u036d\3\2\2\2")
        buf.write("\u0375\u036e\3\2\2\2\u0376\u0085\3\2\2\2\u0377\u0379\5")
        buf.write("\u0088E\2\u0378\u0377\3\2\2\2\u0378\u0379\3\2\2\2\u0379")
        buf.write("\u037a\3\2\2\2\u037a\u0382\5\u0084C\2\u037b\u037d\7j\2")
        buf.write("\2\u037c\u037e\5\u0088E\2\u037d\u037c\3\2\2\2\u037d\u037e")
        buf.write("\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u0381\5\u0084C\2\u0380")
        buf.write("\u037b\3\2\2\2\u0381\u0384\3\2\2\2\u0382\u0380\3\2\2\2")
        buf.write("\u0382\u0383\3\2\2\2\u0383\u0087\3\2\2\2\u0384\u0382\3")
        buf.write("\2\2\2\u0385\u0386\5\u008aF\2\u0386\u0387\7k\2\2\u0387")
        buf.write("\u0089\3\2\2\2\u0388\u038a\5\u008cG\2\u0389\u0388\3\2")
        buf.write("\2\2\u038a\u038b\3\2\2\2\u038b\u0389\3\2\2\2\u038b\u038c")
        buf.write("\3\2\2\2\u038c\u008b\3\2\2\2\u038d\u038e\7O\2\2\u038e")
        buf.write("\u038f\5\60\31\2\u038f\u0390\7P\2\2\u0390\u0394\3\2\2")
        buf.write("\2\u0391\u0392\7y\2\2\u0392\u0394\7{\2\2\u0393\u038d\3")
        buf.write("\2\2\2\u0393\u0391\3\2\2\2\u0394\u008d\3\2\2\2\u0395\u0396")
        buf.write("\7K\2\2\u0396\u0397\7M\2\2\u0397\u0398\5\60\31\2\u0398")
        buf.write("\u039a\7j\2\2\u0399\u039b\7~\2\2\u039a\u0399\3\2\2\2\u039b")
        buf.write("\u039c\3\2\2\2\u039c\u039a\3\2\2\2\u039c\u039d\3\2\2\2")
        buf.write("\u039d\u039e\3\2\2\2\u039e\u039f\7N\2\2\u039f\u03a0\7")
        buf.write("i\2\2\u03a0\u008f\3\2\2\2\u03a1\u03a2\7\24\2\2\u03a2\u03a3")
        buf.write("\5\u0098M\2\u03a3\u03a4\7\25\2\2\u03a4\u03a5\5\u009cO")
        buf.write("\2\u03a5\u03a6\7\26\2\2\u03a6\u03a7\7{\2\2\u03a7\u03a8")
        buf.write("\7i\2\2\u03a8\u0091\3\2\2\2\u03a9\u03aa\7\27\2\2\u03aa")
        buf.write("\u03ab\7{\2\2\u03ab\u03ac\7\30\2\2\u03ac\u03ad\5\u009a")
        buf.write("N\2\u03ad\u03ae\7\31\2\2\u03ae\u03af\5\u009aN\2\u03af")
        buf.write("\u03b0\7\32\2\2\u03b0\u0093\3\2\2\2\u03b1\u03b2\7\33\2")
        buf.write("\2\u03b2\u03b3\7{\2\2\u03b3\u03b4\7\34\2\2\u03b4\u03b5")
        buf.write("\5\u009aN\2\u03b5\u03b6\7\35\2\2\u03b6\u03b7\5\u009aN")
        buf.write("\2\u03b7\u03b8\7i\2\2\u03b8\u0095\3\2\2\2\u03b9\u03ba")
        buf.write("\7\36\2\2\u03ba\u03bb\7{\2\2\u03bb\u03bc\7\35\2\2\u03bc")
        buf.write("\u03bd\5\u009aN\2\u03bd\u03be\7i\2\2\u03be\u0097\3\2\2")
        buf.write("\2\u03bf\u03c4\7{\2\2\u03c0\u03c1\7j\2\2\u03c1\u03c3\7")
        buf.write("{\2\2\u03c2\u03c0\3\2\2\2\u03c3\u03c6\3\2\2\2\u03c4\u03c2")
        buf.write("\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5\u0099\3\2\2\2\u03c6")
        buf.write("\u03c4\3\2\2\2\u03c7\u03cc\5.\30\2\u03c8\u03c9\7j\2\2")
        buf.write("\u03c9\u03cb\5.\30\2\u03ca\u03c8\3\2\2\2\u03cb\u03ce\3")
        buf.write("\2\2\2\u03cc\u03ca\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd\u009b")
        buf.write("\3\2\2\2\u03ce\u03cc\3\2\2\2\u03cf\u03d4\7{\2\2\u03d0")
        buf.write("\u03d1\7j\2\2\u03d1\u03d3\7{\2\2\u03d2\u03d0\3\2\2\2\u03d3")
        buf.write("\u03d6\3\2\2\2\u03d4\u03d2\3\2\2\2\u03d4\u03d5\3\2\2\2")
        buf.write("\u03d5\u009d\3\2\2\2\u03d6\u03d4\3\2\2\2\u03d7\u0401\5")
        buf.write("\u00a0Q\2\u03d8\u0401\5\u00a2R\2\u03d9\u0401\5\u00a8U")
        buf.write("\2\u03da\u0401\5\u00aaV\2\u03db\u0401\5\u00acW\2\u03dc")
        buf.write("\u0401\5\u00b4[\2\u03dd\u0401\5\u0090I\2\u03de\u0401\5")
        buf.write("\u0092J\2\u03df\u0401\5\u0094K\2\u03e0\u0401\5\u0096L")
        buf.write("\2\u03e1\u03e2\t\27\2\2\u03e2\u03e3\t\30\2\2\u03e3\u03ec")
        buf.write("\7M\2\2\u03e4\u03e9\5&\24\2\u03e5\u03e6\7j\2\2\u03e6\u03e8")
        buf.write("\5&\24\2\u03e7\u03e5\3\2\2\2\u03e8\u03eb\3\2\2\2\u03e9")
        buf.write("\u03e7\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u03ed\3\2\2\2")
        buf.write("\u03eb\u03e9\3\2\2\2\u03ec\u03e4\3\2\2\2\u03ec\u03ed\3")
        buf.write("\2\2\2\u03ed\u03fb\3\2\2\2\u03ee\u03f7\7h\2\2\u03ef\u03f4")
        buf.write("\5&\24\2\u03f0\u03f1\7j\2\2\u03f1\u03f3\5&\24\2\u03f2")
        buf.write("\u03f0\3\2\2\2\u03f3\u03f6\3\2\2\2\u03f4\u03f2\3\2\2\2")
        buf.write("\u03f4\u03f5\3\2\2\2\u03f5\u03f8\3\2\2\2\u03f6\u03f4\3")
        buf.write("\2\2\2\u03f7\u03ef\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\u03fa")
        buf.write("\3\2\2\2\u03f9\u03ee\3\2\2\2\u03fa\u03fd\3\2\2\2\u03fb")
        buf.write("\u03f9\3\2\2\2\u03fb\u03fc\3\2\2\2\u03fc\u03fe\3\2\2\2")
        buf.write("\u03fd\u03fb\3\2\2\2\u03fe\u03ff\7N\2\2\u03ff\u0401\7")
        buf.write("i\2\2\u0400\u03d7\3\2\2\2\u0400\u03d8\3\2\2\2\u0400\u03d9")
        buf.write("\3\2\2\2\u0400\u03da\3\2\2\2\u0400\u03db\3\2\2\2\u0400")
        buf.write("\u03dc\3\2\2\2\u0400\u03dd\3\2\2\2\u0400\u03de\3\2\2\2")
        buf.write("\u0400\u03df\3\2\2\2\u0400\u03e0\3\2\2\2\u0400\u03e1\3")
        buf.write("\2\2\2\u0401\u009f\3\2\2\2\u0402\u0403\7{\2\2\u0403\u0404")
        buf.write("\7h\2\2\u0404\u040e\5\u009eP\2\u0405\u0406\7#\2\2\u0406")
        buf.write("\u0407\5\60\31\2\u0407\u0408\7h\2\2\u0408\u0409\5\u009e")
        buf.write("P\2\u0409\u040e\3\2\2\2\u040a\u040b\7\'\2\2\u040b\u040c")
        buf.write("\7h\2\2\u040c\u040e\5\u009eP\2\u040d\u0402\3\2\2\2\u040d")
        buf.write("\u0405\3\2\2\2\u040d\u040a\3\2\2\2\u040e\u00a1\3\2\2\2")
        buf.write("\u040f\u0411\7Q\2\2\u0410\u0412\5\u00a4S\2\u0411\u0410")
        buf.write("\3\2\2\2\u0411\u0412\3\2\2\2\u0412\u0413\3\2\2\2\u0413")
        buf.write("\u0414\7R\2\2\u0414\u00a3\3\2\2\2\u0415\u0417\5\u00a6")
        buf.write("T\2\u0416\u0415\3\2\2\2\u0417\u0418\3\2\2\2\u0418\u0416")
        buf.write("\3\2\2\2\u0418\u0419\3\2\2\2\u0419\u00a5\3\2\2\2\u041a")
        buf.write("\u041d\5\u009eP\2\u041b\u041d\5\62\32\2\u041c\u041a\3")
        buf.write("\2\2\2\u041c\u041b\3\2\2\2\u041d\u00a7\3\2\2\2\u041e\u0420")
        buf.write("\5.\30\2\u041f\u041e\3\2\2\2\u041f\u0420\3\2\2\2\u0420")
        buf.write("\u0421\3\2\2\2\u0421\u0422\7i\2\2\u0422\u00a9\3\2\2\2")
        buf.write("\u0423\u0424\7\60\2\2\u0424\u0425\7M\2\2\u0425\u0426\5")
        buf.write(".\30\2\u0426\u0427\7N\2\2\u0427\u042a\5\u009eP\2\u0428")
        buf.write("\u0429\7*\2\2\u0429\u042b\5\u009eP\2\u042a\u0428\3\2\2")
        buf.write("\2\u042a\u042b\3\2\2\2\u042b\u0433\3\2\2\2\u042c\u042d")
        buf.write("\7<\2\2\u042d\u042e\7M\2\2\u042e\u042f\5.\30\2\u042f\u0430")
        buf.write("\7N\2\2\u0430\u0431\5\u009eP\2\u0431\u0433\3\2\2\2\u0432")
        buf.write("\u0423\3\2\2\2\u0432\u042c\3\2\2\2\u0433\u00ab\3\2\2\2")
        buf.write("\u0434\u0435\7B\2\2\u0435\u0436\7M\2\2\u0436\u0437\5.")
        buf.write("\30\2\u0437\u0438\7N\2\2\u0438\u0439\5\u009eP\2\u0439")
        buf.write("\u0449\3\2\2\2\u043a\u043b\7(\2\2\u043b\u043c\5\u009e")
        buf.write("P\2\u043c\u043d\7B\2\2\u043d\u043e\7M\2\2\u043e\u043f")
        buf.write("\5.\30\2\u043f\u0440\7N\2\2\u0440\u0441\7i\2\2\u0441\u0449")
        buf.write("\3\2\2\2\u0442\u0443\7.\2\2\u0443\u0444\7M\2\2\u0444\u0445")
        buf.write("\5\u00aeX\2\u0445\u0446\7N\2\2\u0446\u0447\5\u009eP\2")
        buf.write("\u0447\u0449\3\2\2\2\u0448\u0434\3\2\2\2\u0448\u043a\3")
        buf.write("\2\2\2\u0448\u0442\3\2\2\2\u0449\u00ad\3\2\2\2\u044a\u044f")
        buf.write("\5\u00b0Y\2\u044b\u044d\5.\30\2\u044c\u044b\3\2\2\2\u044c")
        buf.write("\u044d\3\2\2\2\u044d\u044f\3\2\2\2\u044e\u044a\3\2\2\2")
        buf.write("\u044e\u044c\3\2\2\2\u044f\u0450\3\2\2\2\u0450\u0452\7")
        buf.write("i\2\2\u0451\u0453\5\u00b2Z\2\u0452\u0451\3\2\2\2\u0452")
        buf.write("\u0453\3\2\2\2\u0453\u0454\3\2\2\2\u0454\u0456\7i\2\2")
        buf.write("\u0455\u0457\5\u00b2Z\2\u0456\u0455\3\2\2\2\u0456\u0457")
        buf.write("\3\2\2\2\u0457\u00af\3\2\2\2\u0458\u045a\5\64\33\2\u0459")
        buf.write("\u045b\5:\36\2\u045a\u0459\3\2\2\2\u045a\u045b\3\2\2\2")
        buf.write("\u045b\u00b1\3\2\2\2\u045c\u0461\5*\26\2\u045d\u045e\7")
        buf.write("j\2\2\u045e\u0460\5*\26\2\u045f\u045d\3\2\2\2\u0460\u0463")
        buf.write("\3\2\2\2\u0461\u045f\3\2\2\2\u0461\u0462\3\2\2\2\u0462")
        buf.write("\u00b3\3\2\2\2\u0463\u0461\3\2\2\2\u0464\u0465\7/\2\2")
        buf.write("\u0465\u046e\7{\2\2\u0466\u046e\t\31\2\2\u0467\u0469\7")
        buf.write("\66\2\2\u0468\u046a\5.\30\2\u0469\u0468\3\2\2\2\u0469")
        buf.write("\u046a\3\2\2\2\u046a\u046e\3\2\2\2\u046b\u046c\7/\2\2")
        buf.write("\u046c\u046e\5\16\b\2\u046d\u0464\3\2\2\2\u046d\u0466")
        buf.write("\3\2\2\2\u046d\u0467\3\2\2\2\u046d\u046b\3\2\2\2\u046e")
        buf.write("\u046f\3\2\2\2\u046f\u0470\7i\2\2\u0470\u00b5\3\2\2\2")
        buf.write("\u0471\u0473\5\u00b8]\2\u0472\u0471\3\2\2\2\u0472\u0473")
        buf.write("\3\2\2\2\u0473\u0474\3\2\2\2\u0474\u0475\7\2\2\3\u0475")
        buf.write("\u00b7\3\2\2\2\u0476\u0478\5\u00ba^\2\u0477\u0476\3\2")
        buf.write("\2\2\u0478\u0479\3\2\2\2\u0479\u0477\3\2\2\2\u0479\u047a")
        buf.write("\3\2\2\2\u047a\u00b9\3\2\2\2\u047b\u047f\5\u00bc_\2\u047c")
        buf.write("\u047f\5\62\32\2\u047d\u047f\7i\2\2\u047e\u047b\3\2\2")
        buf.write("\2\u047e\u047c\3\2\2\2\u047e\u047d\3\2\2\2\u047f\u00bb")
        buf.write("\3\2\2\2\u0480\u0482\5\64\33\2\u0481\u0480\3\2\2\2\u0481")
        buf.write("\u0482\3\2\2\2\u0482\u0483\3\2\2\2\u0483\u0485\5`\61\2")
        buf.write("\u0484\u0486\5\u00be`\2\u0485\u0484\3\2\2\2\u0485\u0486")
        buf.write("\3\2\2\2\u0486\u0487\3\2\2\2\u0487\u0488\5\u00a2R\2\u0488")
        buf.write("\u00bd\3\2\2\2\u0489\u048b\5\62\32\2\u048a\u0489\3\2\2")
        buf.write("\2\u048b\u048c\3\2\2\2\u048c\u048a\3\2\2\2\u048c\u048d")
        buf.write("\3\2\2\2\u048d\u00bf\3\2\2\2\u008b\u00c5\u00cd\u00e1\u00ef")
        buf.write("\u00f4\u00fb\u0103\u0107\u010f\u0115\u0117\u011f\u0125")
        buf.write("\u0133\u0138\u0141\u0148\u0150\u0158\u0160\u0168\u0170")
        buf.write("\u0178\u0180\u0188\u0190\u0199\u01a1\u01aa\u01b1\u01b6")
        buf.write("\u01bb\u01c0\u01c7\u01ce\u01d4\u01e6\u01ea\u01f3\u01fa")
        buf.write("\u0204\u0208\u020b\u0212\u0217\u021b\u021f\u0224\u022a")
        buf.write("\u0231\u0237\u0248\u024e\u0253\u0259\u026d\u0272\u0275")
        buf.write("\u027c\u028b\u0297\u029a\u029c\u02a6\u02aa\u02b4\u02b8")
        buf.write("\u02bc\u02c2\u02c5\u02cc\u02ce\u02d3\u02d7\u02dc\u02e1")
        buf.write("\u02e8\u02f0\u02f2\u02f9\u02fe\u0302\u0308\u030b\u0314")
        buf.write("\u0319\u031c\u0322\u0332\u0338\u033b\u0340\u0343\u034a")
        buf.write("\u035d\u0363\u0366\u0368\u0371\u0375\u0378\u037d\u0382")
        buf.write("\u038b\u0393\u039c\u03c4\u03cc\u03d4\u03e9\u03ec\u03f4")
        buf.write("\u03f7\u03fb\u0400\u040d\u0411\u0418\u041c\u041f\u042a")
        buf.write("\u0432\u0448\u044c\u044e\u0452\u0456\u045a\u0461\u0469")
        buf.write("\u046d\u0472\u0479\u047e\u0481\u0485\u048c")
        return buf.getvalue()


class cdbParser ( Parser ):

    grammarFileName = "cdb.antl4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'__extension__'", "'__builtin_va_arg'", 
                     "'__builtin_offsetof'", "'__m128'", "'__m128d'", "'__m128i'", 
                     "'__typeof__'", "'__inline__'", "'__stdcall'", "'__declspec'", 
                     "'__cdecl'", "'__clrcall'", "'__fastcall'", "'__thiscall'", 
                     "'__vectorcall'", "'__asm'", "'__attribute__'", "'SELECT '", 
                     "' FROM '", "' INTO '", "'INSERT INTO '", "' ('", "') VALUES ('", 
                     "');'", "'UPDATE '", "' SET '", "' WHERE '", "'DELETE FROM '", 
                     "'__asm__'", "'__volatile__'", "'auto'", "'break'", 
                     "'case'", "'char'", "'const'", "'continue'", "'default'", 
                     "'do'", "'double'", "'else'", "'enum'", "'extern'", 
                     "'float'", "'for'", "'goto'", "'if'", "'inline'", "'int'", 
                     "'long'", "'register'", "'restrict'", "'return'", "'short'", 
                     "'signed'", "'sizeof'", "'static'", "'struct'", "'switch'", 
                     "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", 
                     "'while'", "'_Alignas'", "'_Alignof'", "'_Atomic'", 
                     "'_Bool'", "'_Complex'", "'_Generic'", "'_Imaginary'", 
                     "'_Noreturn'", "'_Static_assert'", "'_Thread_local'", 
                     "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", "'<='", 
                     "'>'", "'>='", "'<<'", "'>>'", "'+'", "'++'", "'-'", 
                     "'--'", "'*'", "'/'", "'%'", "'&'", "'|'", "'&&'", 
                     "'||'", "'^'", "'!'", "'~'", "'?'", "':'", "';'", "','", 
                     "'='", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", 
                     "'>>='", "'&='", "'^='", "'|='", "'=='", "'!='", "'->'", 
                     "'.'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "Auto", "Break", 
                      "Case", "Char", "Const", "Continue", "Default", "Do", 
                      "Double", "Else", "Enum", "Extern", "Float", "For", 
                      "Goto", "If", "Inline", "Int", "Long", "Register", 
                      "Restrict", "Return", "Short", "Signed", "Sizeof", 
                      "Static", "Struct", "Switch", "Typedef", "Union", 
                      "Unsigned", "Void", "Volatile", "While", "Alignas", 
                      "Alignof", "Atomic", "Bool", "Complex", "Generic", 
                      "Imaginary", "Noreturn", "StaticAssert", "ThreadLocal", 
                      "LeftParen", "RightParen", "LeftBracket", "RightBracket", 
                      "LeftBrace", "RightBrace", "Less", "LessEqual", "Greater", 
                      "GreaterEqual", "LeftShift", "RightShift", "Plus", 
                      "PlusPlus", "Minus", "MinusMinus", "Star", "Div", 
                      "Mod", "And", "Or", "AndAnd", "OrOr", "Caret", "Not", 
                      "Tilde", "Question", "Colon", "Semi", "Comma", "Assign", 
                      "StarAssign", "DivAssign", "ModAssign", "PlusAssign", 
                      "MinusAssign", "LeftShiftAssign", "RightShiftAssign", 
                      "AndAssign", "XorAssign", "OrAssign", "Equal", "NotEqual", 
                      "Arrow", "Dot", "Ellipsis", "Identifier", "Constant", 
                      "DigitSequence", "StringLiteral", "ComplexDefine", 
                      "IncludeDirective", "AsmBlock", "LineAfterPreprocessing", 
                      "LineDirective", "PragmaDirective", "Whitespace", 
                      "Newline", "BlockComment", "LineComment" ]

    RULE_primaryExpression = 0
    RULE_genericSelection = 1
    RULE_genericAssocList = 2
    RULE_genericAssociation = 3
    RULE_postfixExpression = 4
    RULE_argumentExpressionList = 5
    RULE_unaryExpression = 6
    RULE_unaryOperator = 7
    RULE_castExpression = 8
    RULE_multiplicativeExpression = 9
    RULE_additiveExpression = 10
    RULE_shiftExpression = 11
    RULE_relationalExpression = 12
    RULE_equalityExpression = 13
    RULE_andExpression = 14
    RULE_exclusiveOrExpression = 15
    RULE_inclusiveOrExpression = 16
    RULE_logicalAndExpression = 17
    RULE_logicalOrExpression = 18
    RULE_conditionalExpression = 19
    RULE_assignmentExpression = 20
    RULE_assignmentOperator = 21
    RULE_expression = 22
    RULE_constantExpression = 23
    RULE_declaration = 24
    RULE_declarationSpecifiers = 25
    RULE_declarationSpecifiers2 = 26
    RULE_declarationSpecifier = 27
    RULE_initDeclaratorList = 28
    RULE_initDeclarator = 29
    RULE_storageClassSpecifier = 30
    RULE_typeSpecifier = 31
    RULE_structOrUnionSpecifier = 32
    RULE_structOrUnion = 33
    RULE_structDeclarationList = 34
    RULE_structDeclaration = 35
    RULE_specifierQualifierList = 36
    RULE_structDeclaratorList = 37
    RULE_structDeclarator = 38
    RULE_enumSpecifier = 39
    RULE_enumeratorList = 40
    RULE_enumerator = 41
    RULE_enumerationConstant = 42
    RULE_atomicTypeSpecifier = 43
    RULE_typeQualifier = 44
    RULE_functionSpecifier = 45
    RULE_alignmentSpecifier = 46
    RULE_declarator = 47
    RULE_directDeclarator = 48
    RULE_vcSpecificModifer = 49
    RULE_gccDeclaratorExtension = 50
    RULE_gccAttributeSpecifier = 51
    RULE_gccAttributeList = 52
    RULE_gccAttribute = 53
    RULE_nestedParenthesesBlock = 54
    RULE_pointer = 55
    RULE_typeQualifierList = 56
    RULE_parameterTypeList = 57
    RULE_parameterList = 58
    RULE_parameterDeclaration = 59
    RULE_identifierList = 60
    RULE_typeName = 61
    RULE_abstractDeclarator = 62
    RULE_directAbstractDeclarator = 63
    RULE_typedefName = 64
    RULE_initializer = 65
    RULE_initializerList = 66
    RULE_designation = 67
    RULE_designatorList = 68
    RULE_designator = 69
    RULE_staticAssertDeclaration = 70
    RULE_sqlSelectStatement = 71
    RULE_sqlInsertStatement = 72
    RULE_sqlUpdateStatement = 73
    RULE_sqlDeleteStatement = 74
    RULE_fieldList = 75
    RULE_commaSeparatedList = 76
    RULE_spaceSeparatedList = 77
    RULE_statement = 78
    RULE_labeledStatement = 79
    RULE_compoundStatement = 80
    RULE_blockItemList = 81
    RULE_blockItem = 82
    RULE_expressionStatement = 83
    RULE_selectionStatement = 84
    RULE_iterationStatement = 85
    RULE_forCondition = 86
    RULE_forDeclaration = 87
    RULE_forExpression = 88
    RULE_jumpStatement = 89
    RULE_compilationUnit = 90
    RULE_translationUnit = 91
    RULE_externalDeclaration = 92
    RULE_functionDefinition = 93
    RULE_declarationList = 94

    ruleNames =  [ "primaryExpression", "genericSelection", "genericAssocList", 
                   "genericAssociation", "postfixExpression", "argumentExpressionList", 
                   "unaryExpression", "unaryOperator", "castExpression", 
                   "multiplicativeExpression", "additiveExpression", "shiftExpression", 
                   "relationalExpression", "equalityExpression", "andExpression", 
                   "exclusiveOrExpression", "inclusiveOrExpression", "logicalAndExpression", 
                   "logicalOrExpression", "conditionalExpression", "assignmentExpression", 
                   "assignmentOperator", "expression", "constantExpression", 
                   "declaration", "declarationSpecifiers", "declarationSpecifiers2", 
                   "declarationSpecifier", "initDeclaratorList", "initDeclarator", 
                   "storageClassSpecifier", "typeSpecifier", "structOrUnionSpecifier", 
                   "structOrUnion", "structDeclarationList", "structDeclaration", 
                   "specifierQualifierList", "structDeclaratorList", "structDeclarator", 
                   "enumSpecifier", "enumeratorList", "enumerator", "enumerationConstant", 
                   "atomicTypeSpecifier", "typeQualifier", "functionSpecifier", 
                   "alignmentSpecifier", "declarator", "directDeclarator", 
                   "vcSpecificModifer", "gccDeclaratorExtension", "gccAttributeSpecifier", 
                   "gccAttributeList", "gccAttribute", "nestedParenthesesBlock", 
                   "pointer", "typeQualifierList", "parameterTypeList", 
                   "parameterList", "parameterDeclaration", "identifierList", 
                   "typeName", "abstractDeclarator", "directAbstractDeclarator", 
                   "typedefName", "initializer", "initializerList", "designation", 
                   "designatorList", "designator", "staticAssertDeclaration", 
                   "sqlSelectStatement", "sqlInsertStatement", "sqlUpdateStatement", 
                   "sqlDeleteStatement", "fieldList", "commaSeparatedList", 
                   "spaceSeparatedList", "statement", "labeledStatement", 
                   "compoundStatement", "blockItemList", "blockItem", "expressionStatement", 
                   "selectionStatement", "iterationStatement", "forCondition", 
                   "forDeclaration", "forExpression", "jumpStatement", "compilationUnit", 
                   "translationUnit", "externalDeclaration", "functionDefinition", 
                   "declarationList" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    Auto=31
    Break=32
    Case=33
    Char=34
    Const=35
    Continue=36
    Default=37
    Do=38
    Double=39
    Else=40
    Enum=41
    Extern=42
    Float=43
    For=44
    Goto=45
    If=46
    Inline=47
    Int=48
    Long=49
    Register=50
    Restrict=51
    Return=52
    Short=53
    Signed=54
    Sizeof=55
    Static=56
    Struct=57
    Switch=58
    Typedef=59
    Union=60
    Unsigned=61
    Void=62
    Volatile=63
    While=64
    Alignas=65
    Alignof=66
    Atomic=67
    Bool=68
    Complex=69
    Generic=70
    Imaginary=71
    Noreturn=72
    StaticAssert=73
    ThreadLocal=74
    LeftParen=75
    RightParen=76
    LeftBracket=77
    RightBracket=78
    LeftBrace=79
    RightBrace=80
    Less=81
    LessEqual=82
    Greater=83
    GreaterEqual=84
    LeftShift=85
    RightShift=86
    Plus=87
    PlusPlus=88
    Minus=89
    MinusMinus=90
    Star=91
    Div=92
    Mod=93
    And=94
    Or=95
    AndAnd=96
    OrOr=97
    Caret=98
    Not=99
    Tilde=100
    Question=101
    Colon=102
    Semi=103
    Comma=104
    Assign=105
    StarAssign=106
    DivAssign=107
    ModAssign=108
    PlusAssign=109
    MinusAssign=110
    LeftShiftAssign=111
    RightShiftAssign=112
    AndAssign=113
    XorAssign=114
    OrAssign=115
    Equal=116
    NotEqual=117
    Arrow=118
    Dot=119
    Ellipsis=120
    Identifier=121
    Constant=122
    DigitSequence=123
    StringLiteral=124
    ComplexDefine=125
    IncludeDirective=126
    AsmBlock=127
    LineAfterPreprocessing=128
    LineDirective=129
    PragmaDirective=130
    Whitespace=131
    Newline=132
    BlockComment=133
    LineComment=134

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class PrimaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(cdbParser.Identifier, 0)

        def Constant(self):
            return self.getToken(cdbParser.Constant, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.StringLiteral)
            else:
                return self.getToken(cdbParser.StringLiteral, i)

        def LeftParen(self):
            return self.getToken(cdbParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(cdbParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(cdbParser.RightParen, 0)

        def genericSelection(self):
            return self.getTypedRuleContext(cdbParser.GenericSelectionContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(cdbParser.CompoundStatementContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(cdbParser.UnaryExpressionContext,0)


        def Comma(self):
            return self.getToken(cdbParser.Comma, 0)

        def typeName(self):
            return self.getTypedRuleContext(cdbParser.TypeNameContext,0)


        def getRuleIndex(self):
            return cdbParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = cdbParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_primaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 223
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 190
                self.match(cdbParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 191
                self.match(cdbParser.Constant)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 193 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 192
                    self.match(cdbParser.StringLiteral)
                    self.state = 195 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==cdbParser.StringLiteral):
                        break

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 197
                self.match(cdbParser.LeftParen)
                self.state = 198
                self.expression()
                self.state = 199
                self.match(cdbParser.RightParen)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 201
                self.genericSelection()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cdbParser.T__0:
                    self.state = 202
                    self.match(cdbParser.T__0)


                self.state = 205
                self.match(cdbParser.LeftParen)
                self.state = 206
                self.compoundStatement()
                self.state = 207
                self.match(cdbParser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 209
                self.match(cdbParser.T__1)
                self.state = 210
                self.match(cdbParser.LeftParen)
                self.state = 211
                self.unaryExpression()
                self.state = 212
                self.match(cdbParser.Comma)
                self.state = 213
                self.typeName()
                self.state = 214
                self.match(cdbParser.RightParen)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 216
                self.match(cdbParser.T__2)
                self.state = 217
                self.match(cdbParser.LeftParen)
                self.state = 218
                self.typeName()
                self.state = 219
                self.match(cdbParser.Comma)
                self.state = 220
                self.unaryExpression()
                self.state = 221
                self.match(cdbParser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericSelectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Generic(self):
            return self.getToken(cdbParser.Generic, 0)

        def LeftParen(self):
            return self.getToken(cdbParser.LeftParen, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(cdbParser.AssignmentExpressionContext,0)


        def Comma(self):
            return self.getToken(cdbParser.Comma, 0)

        def genericAssocList(self):
            return self.getTypedRuleContext(cdbParser.GenericAssocListContext,0)


        def RightParen(self):
            return self.getToken(cdbParser.RightParen, 0)

        def getRuleIndex(self):
            return cdbParser.RULE_genericSelection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericSelection" ):
                listener.enterGenericSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericSelection" ):
                listener.exitGenericSelection(self)




    def genericSelection(self):

        localctx = cdbParser.GenericSelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_genericSelection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self.match(cdbParser.Generic)
            self.state = 226
            self.match(cdbParser.LeftParen)
            self.state = 227
            self.assignmentExpression()
            self.state = 228
            self.match(cdbParser.Comma)
            self.state = 229
            self.genericAssocList()
            self.state = 230
            self.match(cdbParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericAssocListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericAssociation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.GenericAssociationContext)
            else:
                return self.getTypedRuleContext(cdbParser.GenericAssociationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Comma)
            else:
                return self.getToken(cdbParser.Comma, i)

        def getRuleIndex(self):
            return cdbParser.RULE_genericAssocList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericAssocList" ):
                listener.enterGenericAssocList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericAssocList" ):
                listener.exitGenericAssocList(self)




    def genericAssocList(self):

        localctx = cdbParser.GenericAssocListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_genericAssocList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 232
            self.genericAssociation()
            self.state = 237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cdbParser.Comma:
                self.state = 233
                self.match(cdbParser.Comma)
                self.state = 234
                self.genericAssociation()
                self.state = 239
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericAssociationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(cdbParser.Colon, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(cdbParser.AssignmentExpressionContext,0)


        def typeName(self):
            return self.getTypedRuleContext(cdbParser.TypeNameContext,0)


        def Default(self):
            return self.getToken(cdbParser.Default, 0)

        def getRuleIndex(self):
            return cdbParser.RULE_genericAssociation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericAssociation" ):
                listener.enterGenericAssociation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericAssociation" ):
                listener.exitGenericAssociation(self)




    def genericAssociation(self):

        localctx = cdbParser.GenericAssociationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_genericAssociation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cdbParser.T__0, cdbParser.T__3, cdbParser.T__4, cdbParser.T__5, cdbParser.T__6, cdbParser.Char, cdbParser.Const, cdbParser.Double, cdbParser.Enum, cdbParser.Float, cdbParser.Int, cdbParser.Long, cdbParser.Restrict, cdbParser.Short, cdbParser.Signed, cdbParser.Struct, cdbParser.Union, cdbParser.Unsigned, cdbParser.Void, cdbParser.Volatile, cdbParser.Atomic, cdbParser.Bool, cdbParser.Complex, cdbParser.Identifier]:
                self.state = 240
                self.typeName()
                pass
            elif token in [cdbParser.Default]:
                self.state = 241
                self.match(cdbParser.Default)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 244
            self.match(cdbParser.Colon)
            self.state = 245
            self.assignmentExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(cdbParser.PrimaryExpressionContext,0)


        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.LeftParen)
            else:
                return self.getToken(cdbParser.LeftParen, i)

        def typeName(self):
            return self.getTypedRuleContext(cdbParser.TypeNameContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.RightParen)
            else:
                return self.getToken(cdbParser.RightParen, i)

        def LeftBrace(self):
            return self.getToken(cdbParser.LeftBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(cdbParser.InitializerListContext,0)


        def RightBrace(self):
            return self.getToken(cdbParser.RightBrace, 0)

        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.LeftBracket)
            else:
                return self.getToken(cdbParser.LeftBracket, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cdbParser.ExpressionContext,i)


        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.RightBracket)
            else:
                return self.getToken(cdbParser.RightBracket, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Identifier)
            else:
                return self.getToken(cdbParser.Identifier, i)

        def Dot(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Dot)
            else:
                return self.getToken(cdbParser.Dot, i)

        def Arrow(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Arrow)
            else:
                return self.getToken(cdbParser.Arrow, i)

        def PlusPlus(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.PlusPlus)
            else:
                return self.getToken(cdbParser.PlusPlus, i)

        def MinusMinus(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.MinusMinus)
            else:
                return self.getToken(cdbParser.MinusMinus, i)

        def Comma(self):
            return self.getToken(cdbParser.Comma, 0)

        def argumentExpressionList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.ArgumentExpressionListContext)
            else:
                return self.getTypedRuleContext(cdbParser.ArgumentExpressionListContext,i)


        def getRuleIndex(self):
            return cdbParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)




    def postfixExpression(self):

        localctx = cdbParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_postfixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 247
                self.primaryExpression()
                pass

            elif la_ == 2:
                self.state = 249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cdbParser.T__0:
                    self.state = 248
                    self.match(cdbParser.T__0)


                self.state = 251
                self.match(cdbParser.LeftParen)
                self.state = 252
                self.typeName()
                self.state = 253
                self.match(cdbParser.RightParen)
                self.state = 254
                self.match(cdbParser.LeftBrace)
                self.state = 255
                self.initializerList()
                self.state = 257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cdbParser.Comma:
                    self.state = 256
                    self.match(cdbParser.Comma)


                self.state = 259
                self.match(cdbParser.RightBrace)
                pass


            self.state = 277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (cdbParser.LeftParen - 75)) | (1 << (cdbParser.LeftBracket - 75)) | (1 << (cdbParser.PlusPlus - 75)) | (1 << (cdbParser.MinusMinus - 75)) | (1 << (cdbParser.Arrow - 75)) | (1 << (cdbParser.Dot - 75)))) != 0):
                self.state = 275
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [cdbParser.LeftBracket]:
                    self.state = 263
                    self.match(cdbParser.LeftBracket)
                    self.state = 264
                    self.expression()
                    self.state = 265
                    self.match(cdbParser.RightBracket)
                    pass
                elif token in [cdbParser.LeftParen]:
                    self.state = 267
                    self.match(cdbParser.LeftParen)
                    self.state = 269
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__0) | (1 << cdbParser.T__1) | (1 << cdbParser.T__2) | (1 << cdbParser.Sizeof))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (cdbParser.Alignof - 66)) | (1 << (cdbParser.Generic - 66)) | (1 << (cdbParser.LeftParen - 66)) | (1 << (cdbParser.Plus - 66)) | (1 << (cdbParser.PlusPlus - 66)) | (1 << (cdbParser.Minus - 66)) | (1 << (cdbParser.MinusMinus - 66)) | (1 << (cdbParser.Star - 66)) | (1 << (cdbParser.And - 66)) | (1 << (cdbParser.AndAnd - 66)) | (1 << (cdbParser.Not - 66)) | (1 << (cdbParser.Tilde - 66)) | (1 << (cdbParser.Identifier - 66)) | (1 << (cdbParser.Constant - 66)) | (1 << (cdbParser.DigitSequence - 66)) | (1 << (cdbParser.StringLiteral - 66)))) != 0):
                        self.state = 268
                        self.argumentExpressionList()


                    self.state = 271
                    self.match(cdbParser.RightParen)
                    pass
                elif token in [cdbParser.Arrow, cdbParser.Dot]:
                    self.state = 272
                    _la = self._input.LA(1)
                    if not(_la==cdbParser.Arrow or _la==cdbParser.Dot):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 273
                    self.match(cdbParser.Identifier)
                    pass
                elif token in [cdbParser.PlusPlus, cdbParser.MinusMinus]:
                    self.state = 274
                    _la = self._input.LA(1)
                    if not(_la==cdbParser.PlusPlus or _la==cdbParser.MinusMinus):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 279
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentExpressionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(cdbParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Comma)
            else:
                return self.getToken(cdbParser.Comma, i)

        def getRuleIndex(self):
            return cdbParser.RULE_argumentExpressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentExpressionList" ):
                listener.enterArgumentExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentExpressionList" ):
                listener.exitArgumentExpressionList(self)




    def argumentExpressionList(self):

        localctx = cdbParser.ArgumentExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_argumentExpressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            self.assignmentExpression()
            self.state = 285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cdbParser.Comma:
                self.state = 281
                self.match(cdbParser.Comma)
                self.state = 282
                self.assignmentExpression()
                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(cdbParser.PostfixExpressionContext,0)


        def unaryOperator(self):
            return self.getTypedRuleContext(cdbParser.UnaryOperatorContext,0)


        def castExpression(self):
            return self.getTypedRuleContext(cdbParser.CastExpressionContext,0)


        def LeftParen(self):
            return self.getToken(cdbParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(cdbParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(cdbParser.RightParen, 0)

        def AndAnd(self):
            return self.getToken(cdbParser.AndAnd, 0)

        def Identifier(self):
            return self.getToken(cdbParser.Identifier, 0)

        def Sizeof(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Sizeof)
            else:
                return self.getToken(cdbParser.Sizeof, i)

        def Alignof(self):
            return self.getToken(cdbParser.Alignof, 0)

        def PlusPlus(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.PlusPlus)
            else:
                return self.getToken(cdbParser.PlusPlus, i)

        def MinusMinus(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.MinusMinus)
            else:
                return self.getToken(cdbParser.MinusMinus, i)

        def getRuleIndex(self):
            return cdbParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)




    def unaryExpression(self):

        localctx = cdbParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_unaryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 288
                    _la = self._input.LA(1)
                    if not(((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (cdbParser.Sizeof - 55)) | (1 << (cdbParser.PlusPlus - 55)) | (1 << (cdbParser.MinusMinus - 55)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 293
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

            self.state = 305
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cdbParser.T__0, cdbParser.T__1, cdbParser.T__2, cdbParser.Generic, cdbParser.LeftParen, cdbParser.Identifier, cdbParser.Constant, cdbParser.StringLiteral]:
                self.state = 294
                self.postfixExpression()
                pass
            elif token in [cdbParser.Plus, cdbParser.Minus, cdbParser.Star, cdbParser.And, cdbParser.Not, cdbParser.Tilde]:
                self.state = 295
                self.unaryOperator()
                self.state = 296
                self.castExpression()
                pass
            elif token in [cdbParser.Sizeof, cdbParser.Alignof]:
                self.state = 298
                _la = self._input.LA(1)
                if not(_la==cdbParser.Sizeof or _la==cdbParser.Alignof):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 299
                self.match(cdbParser.LeftParen)
                self.state = 300
                self.typeName()
                self.state = 301
                self.match(cdbParser.RightParen)
                pass
            elif token in [cdbParser.AndAnd]:
                self.state = 303
                self.match(cdbParser.AndAnd)
                self.state = 304
                self.match(cdbParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(cdbParser.And, 0)

        def Star(self):
            return self.getToken(cdbParser.Star, 0)

        def Plus(self):
            return self.getToken(cdbParser.Plus, 0)

        def Minus(self):
            return self.getToken(cdbParser.Minus, 0)

        def Tilde(self):
            return self.getToken(cdbParser.Tilde, 0)

        def Not(self):
            return self.getToken(cdbParser.Not, 0)

        def getRuleIndex(self):
            return cdbParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)




    def unaryOperator(self):

        localctx = cdbParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 307
            _la = self._input.LA(1)
            if not(((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (cdbParser.Plus - 87)) | (1 << (cdbParser.Minus - 87)) | (1 << (cdbParser.Star - 87)) | (1 << (cdbParser.And - 87)) | (1 << (cdbParser.Not - 87)) | (1 << (cdbParser.Tilde - 87)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(cdbParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(cdbParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(cdbParser.RightParen, 0)

        def castExpression(self):
            return self.getTypedRuleContext(cdbParser.CastExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(cdbParser.UnaryExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(cdbParser.DigitSequence, 0)

        def getRuleIndex(self):
            return cdbParser.RULE_castExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)




    def castExpression(self):

        localctx = cdbParser.CastExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_castExpression)
        self._la = 0 # Token type
        try:
            self.state = 319
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cdbParser.T__0:
                    self.state = 309
                    self.match(cdbParser.T__0)


                self.state = 312
                self.match(cdbParser.LeftParen)
                self.state = 313
                self.typeName()
                self.state = 314
                self.match(cdbParser.RightParen)
                self.state = 315
                self.castExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 317
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 318
                self.match(cdbParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.CastExpressionContext)
            else:
                return self.getTypedRuleContext(cdbParser.CastExpressionContext,i)


        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Star)
            else:
                return self.getToken(cdbParser.Star, i)

        def Div(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Div)
            else:
                return self.getToken(cdbParser.Div, i)

        def Mod(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Mod)
            else:
                return self.getToken(cdbParser.Mod, i)

        def getRuleIndex(self):
            return cdbParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)




    def multiplicativeExpression(self):

        localctx = cdbParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_multiplicativeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            self.castExpression()
            self.state = 326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & ((1 << (cdbParser.Star - 91)) | (1 << (cdbParser.Div - 91)) | (1 << (cdbParser.Mod - 91)))) != 0):
                self.state = 322
                _la = self._input.LA(1)
                if not(((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & ((1 << (cdbParser.Star - 91)) | (1 << (cdbParser.Div - 91)) | (1 << (cdbParser.Mod - 91)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 323
                self.castExpression()
                self.state = 328
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(cdbParser.MultiplicativeExpressionContext,i)


        def Plus(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Plus)
            else:
                return self.getToken(cdbParser.Plus, i)

        def Minus(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Minus)
            else:
                return self.getToken(cdbParser.Minus, i)

        def getRuleIndex(self):
            return cdbParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)




    def additiveExpression(self):

        localctx = cdbParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_additiveExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 329
            self.multiplicativeExpression()
            self.state = 334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cdbParser.Plus or _la==cdbParser.Minus:
                self.state = 330
                _la = self._input.LA(1)
                if not(_la==cdbParser.Plus or _la==cdbParser.Minus):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 331
                self.multiplicativeExpression()
                self.state = 336
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShiftExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(cdbParser.AdditiveExpressionContext,i)


        def LeftShift(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.LeftShift)
            else:
                return self.getToken(cdbParser.LeftShift, i)

        def RightShift(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.RightShift)
            else:
                return self.getToken(cdbParser.RightShift, i)

        def getRuleIndex(self):
            return cdbParser.RULE_shiftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftExpression" ):
                listener.enterShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftExpression" ):
                listener.exitShiftExpression(self)




    def shiftExpression(self):

        localctx = cdbParser.ShiftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_shiftExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self.additiveExpression()
            self.state = 342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cdbParser.LeftShift or _la==cdbParser.RightShift:
                self.state = 338
                _la = self._input.LA(1)
                if not(_la==cdbParser.LeftShift or _la==cdbParser.RightShift):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 339
                self.additiveExpression()
                self.state = 344
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.ShiftExpressionContext)
            else:
                return self.getTypedRuleContext(cdbParser.ShiftExpressionContext,i)


        def Less(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Less)
            else:
                return self.getToken(cdbParser.Less, i)

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Greater)
            else:
                return self.getToken(cdbParser.Greater, i)

        def LessEqual(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.LessEqual)
            else:
                return self.getToken(cdbParser.LessEqual, i)

        def GreaterEqual(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.GreaterEqual)
            else:
                return self.getToken(cdbParser.GreaterEqual, i)

        def getRuleIndex(self):
            return cdbParser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)




    def relationalExpression(self):

        localctx = cdbParser.RelationalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_relationalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.shiftExpression()
            self.state = 350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (cdbParser.Less - 81)) | (1 << (cdbParser.LessEqual - 81)) | (1 << (cdbParser.Greater - 81)) | (1 << (cdbParser.GreaterEqual - 81)))) != 0):
                self.state = 346
                _la = self._input.LA(1)
                if not(((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (cdbParser.Less - 81)) | (1 << (cdbParser.LessEqual - 81)) | (1 << (cdbParser.Greater - 81)) | (1 << (cdbParser.GreaterEqual - 81)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 347
                self.shiftExpression()
                self.state = 352
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.RelationalExpressionContext)
            else:
                return self.getTypedRuleContext(cdbParser.RelationalExpressionContext,i)


        def Equal(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Equal)
            else:
                return self.getToken(cdbParser.Equal, i)

        def NotEqual(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.NotEqual)
            else:
                return self.getToken(cdbParser.NotEqual, i)

        def getRuleIndex(self):
            return cdbParser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)




    def equalityExpression(self):

        localctx = cdbParser.EqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_equalityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            self.relationalExpression()
            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cdbParser.Equal or _la==cdbParser.NotEqual:
                self.state = 354
                _la = self._input.LA(1)
                if not(_la==cdbParser.Equal or _la==cdbParser.NotEqual):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 355
                self.relationalExpression()
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.EqualityExpressionContext)
            else:
                return self.getTypedRuleContext(cdbParser.EqualityExpressionContext,i)


        def And(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.And)
            else:
                return self.getToken(cdbParser.And, i)

        def getRuleIndex(self):
            return cdbParser.RULE_andExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpression" ):
                listener.enterAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpression" ):
                listener.exitAndExpression(self)




    def andExpression(self):

        localctx = cdbParser.AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_andExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361
            self.equalityExpression()
            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cdbParser.And:
                self.state = 362
                self.match(cdbParser.And)
                self.state = 363
                self.equalityExpression()
                self.state = 368
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExclusiveOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.AndExpressionContext)
            else:
                return self.getTypedRuleContext(cdbParser.AndExpressionContext,i)


        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Caret)
            else:
                return self.getToken(cdbParser.Caret, i)

        def getRuleIndex(self):
            return cdbParser.RULE_exclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveOrExpression" ):
                listener.enterExclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveOrExpression" ):
                listener.exitExclusiveOrExpression(self)




    def exclusiveOrExpression(self):

        localctx = cdbParser.ExclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_exclusiveOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.andExpression()
            self.state = 374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cdbParser.Caret:
                self.state = 370
                self.match(cdbParser.Caret)
                self.state = 371
                self.andExpression()
                self.state = 376
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InclusiveOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.ExclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(cdbParser.ExclusiveOrExpressionContext,i)


        def Or(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Or)
            else:
                return self.getToken(cdbParser.Or, i)

        def getRuleIndex(self):
            return cdbParser.RULE_inclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveOrExpression" ):
                listener.enterInclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveOrExpression" ):
                listener.exitInclusiveOrExpression(self)




    def inclusiveOrExpression(self):

        localctx = cdbParser.InclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_inclusiveOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 377
            self.exclusiveOrExpression()
            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cdbParser.Or:
                self.state = 378
                self.match(cdbParser.Or)
                self.state = 379
                self.exclusiveOrExpression()
                self.state = 384
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalAndExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.InclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(cdbParser.InclusiveOrExpressionContext,i)


        def AndAnd(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.AndAnd)
            else:
                return self.getToken(cdbParser.AndAnd, i)

        def getRuleIndex(self):
            return cdbParser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)




    def logicalAndExpression(self):

        localctx = cdbParser.LogicalAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_logicalAndExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 385
            self.inclusiveOrExpression()
            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cdbParser.AndAnd:
                self.state = 386
                self.match(cdbParser.AndAnd)
                self.state = 387
                self.inclusiveOrExpression()
                self.state = 392
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.LogicalAndExpressionContext)
            else:
                return self.getTypedRuleContext(cdbParser.LogicalAndExpressionContext,i)


        def OrOr(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.OrOr)
            else:
                return self.getToken(cdbParser.OrOr, i)

        def getRuleIndex(self):
            return cdbParser.RULE_logicalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)




    def logicalOrExpression(self):

        localctx = cdbParser.LogicalOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_logicalOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.logicalAndExpression()
            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cdbParser.OrOr:
                self.state = 394
                self.match(cdbParser.OrOr)
                self.state = 395
                self.logicalAndExpression()
                self.state = 400
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(cdbParser.LogicalOrExpressionContext,0)


        def Question(self):
            return self.getToken(cdbParser.Question, 0)

        def expression(self):
            return self.getTypedRuleContext(cdbParser.ExpressionContext,0)


        def Colon(self):
            return self.getToken(cdbParser.Colon, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(cdbParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return cdbParser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)




    def conditionalExpression(self):

        localctx = cdbParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_conditionalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.logicalOrExpression()
            self.state = 407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cdbParser.Question:
                self.state = 402
                self.match(cdbParser.Question)
                self.state = 403
                self.expression()
                self.state = 404
                self.match(cdbParser.Colon)
                self.state = 405
                self.conditionalExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(cdbParser.ConditionalExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(cdbParser.UnaryExpressionContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(cdbParser.AssignmentOperatorContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(cdbParser.AssignmentExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(cdbParser.DigitSequence, 0)

        def getRuleIndex(self):
            return cdbParser.RULE_assignmentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)




    def assignmentExpression(self):

        localctx = cdbParser.AssignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_assignmentExpression)
        try:
            self.state = 415
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 409
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 410
                self.unaryExpression()
                self.state = 411
                self.assignmentOperator()
                self.state = 412
                self.assignmentExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 414
                self.match(cdbParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(cdbParser.Assign, 0)

        def StarAssign(self):
            return self.getToken(cdbParser.StarAssign, 0)

        def DivAssign(self):
            return self.getToken(cdbParser.DivAssign, 0)

        def ModAssign(self):
            return self.getToken(cdbParser.ModAssign, 0)

        def PlusAssign(self):
            return self.getToken(cdbParser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(cdbParser.MinusAssign, 0)

        def LeftShiftAssign(self):
            return self.getToken(cdbParser.LeftShiftAssign, 0)

        def RightShiftAssign(self):
            return self.getToken(cdbParser.RightShiftAssign, 0)

        def AndAssign(self):
            return self.getToken(cdbParser.AndAssign, 0)

        def XorAssign(self):
            return self.getToken(cdbParser.XorAssign, 0)

        def OrAssign(self):
            return self.getToken(cdbParser.OrAssign, 0)

        def getRuleIndex(self):
            return cdbParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = cdbParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            _la = self._input.LA(1)
            if not(((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & ((1 << (cdbParser.Assign - 105)) | (1 << (cdbParser.StarAssign - 105)) | (1 << (cdbParser.DivAssign - 105)) | (1 << (cdbParser.ModAssign - 105)) | (1 << (cdbParser.PlusAssign - 105)) | (1 << (cdbParser.MinusAssign - 105)) | (1 << (cdbParser.LeftShiftAssign - 105)) | (1 << (cdbParser.RightShiftAssign - 105)) | (1 << (cdbParser.AndAssign - 105)) | (1 << (cdbParser.XorAssign - 105)) | (1 << (cdbParser.OrAssign - 105)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(cdbParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Comma)
            else:
                return self.getToken(cdbParser.Comma, i)

        def getRuleIndex(self):
            return cdbParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = cdbParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.assignmentExpression()
            self.state = 424
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 420
                    self.match(cdbParser.Comma)
                    self.state = 421
                    self.assignmentExpression() 
                self.state = 426
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(cdbParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return cdbParser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)




    def constantExpression(self):

        localctx = cdbParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 427
            self.conditionalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(cdbParser.DeclarationSpecifiersContext,0)


        def Semi(self):
            return self.getToken(cdbParser.Semi, 0)

        def initDeclaratorList(self):
            return self.getTypedRuleContext(cdbParser.InitDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(cdbParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return cdbParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = cdbParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.state = 436
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cdbParser.T__0, cdbParser.T__3, cdbParser.T__4, cdbParser.T__5, cdbParser.T__6, cdbParser.T__7, cdbParser.T__8, cdbParser.T__9, cdbParser.T__16, cdbParser.Auto, cdbParser.Char, cdbParser.Const, cdbParser.Double, cdbParser.Enum, cdbParser.Extern, cdbParser.Float, cdbParser.Inline, cdbParser.Int, cdbParser.Long, cdbParser.Register, cdbParser.Restrict, cdbParser.Short, cdbParser.Signed, cdbParser.Static, cdbParser.Struct, cdbParser.Typedef, cdbParser.Union, cdbParser.Unsigned, cdbParser.Void, cdbParser.Volatile, cdbParser.Alignas, cdbParser.Atomic, cdbParser.Bool, cdbParser.Complex, cdbParser.Noreturn, cdbParser.ThreadLocal, cdbParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 429
                self.declarationSpecifiers()
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__8) | (1 << cdbParser.T__10) | (1 << cdbParser.T__11) | (1 << cdbParser.T__12) | (1 << cdbParser.T__13) | (1 << cdbParser.T__14))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (cdbParser.LeftParen - 75)) | (1 << (cdbParser.Star - 75)) | (1 << (cdbParser.Caret - 75)) | (1 << (cdbParser.Identifier - 75)))) != 0):
                    self.state = 430
                    self.initDeclaratorList()


                self.state = 433
                self.match(cdbParser.Semi)
                pass
            elif token in [cdbParser.StaticAssert]:
                self.enterOuterAlt(localctx, 2)
                self.state = 435
                self.staticAssertDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(cdbParser.DeclarationSpecifierContext,i)


        def getRuleIndex(self):
            return cdbParser.RULE_declarationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers" ):
                listener.enterDeclarationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers" ):
                listener.exitDeclarationSpecifiers(self)




    def declarationSpecifiers(self):

        localctx = cdbParser.DeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_declarationSpecifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 439 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 438
                    self.declarationSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 441 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiers2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(cdbParser.DeclarationSpecifierContext,i)


        def getRuleIndex(self):
            return cdbParser.RULE_declarationSpecifiers2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers2" ):
                listener.enterDeclarationSpecifiers2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers2" ):
                listener.exitDeclarationSpecifiers2(self)




    def declarationSpecifiers2(self):

        localctx = cdbParser.DeclarationSpecifiers2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_declarationSpecifiers2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 443
                self.declarationSpecifier()
                self.state = 446 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__0) | (1 << cdbParser.T__3) | (1 << cdbParser.T__4) | (1 << cdbParser.T__5) | (1 << cdbParser.T__6) | (1 << cdbParser.T__7) | (1 << cdbParser.T__8) | (1 << cdbParser.T__9) | (1 << cdbParser.T__16) | (1 << cdbParser.Auto) | (1 << cdbParser.Char) | (1 << cdbParser.Const) | (1 << cdbParser.Double) | (1 << cdbParser.Enum) | (1 << cdbParser.Extern) | (1 << cdbParser.Float) | (1 << cdbParser.Inline) | (1 << cdbParser.Int) | (1 << cdbParser.Long) | (1 << cdbParser.Register) | (1 << cdbParser.Restrict) | (1 << cdbParser.Short) | (1 << cdbParser.Signed) | (1 << cdbParser.Static) | (1 << cdbParser.Struct) | (1 << cdbParser.Typedef) | (1 << cdbParser.Union) | (1 << cdbParser.Unsigned) | (1 << cdbParser.Void) | (1 << cdbParser.Volatile))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (cdbParser.Alignas - 65)) | (1 << (cdbParser.Atomic - 65)) | (1 << (cdbParser.Bool - 65)) | (1 << (cdbParser.Complex - 65)) | (1 << (cdbParser.Noreturn - 65)) | (1 << (cdbParser.ThreadLocal - 65)) | (1 << (cdbParser.Identifier - 65)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storageClassSpecifier(self):
            return self.getTypedRuleContext(cdbParser.StorageClassSpecifierContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(cdbParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(cdbParser.TypeQualifierContext,0)


        def functionSpecifier(self):
            return self.getTypedRuleContext(cdbParser.FunctionSpecifierContext,0)


        def alignmentSpecifier(self):
            return self.getTypedRuleContext(cdbParser.AlignmentSpecifierContext,0)


        def getRuleIndex(self):
            return cdbParser.RULE_declarationSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifier" ):
                listener.enterDeclarationSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifier" ):
                listener.exitDeclarationSpecifier(self)




    def declarationSpecifier(self):

        localctx = cdbParser.DeclarationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_declarationSpecifier)
        try:
            self.state = 453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 448
                self.storageClassSpecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 449
                self.typeSpecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 450
                self.typeQualifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 451
                self.functionSpecifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 452
                self.alignmentSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.InitDeclaratorContext)
            else:
                return self.getTypedRuleContext(cdbParser.InitDeclaratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Comma)
            else:
                return self.getToken(cdbParser.Comma, i)

        def getRuleIndex(self):
            return cdbParser.RULE_initDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclaratorList" ):
                listener.enterInitDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclaratorList" ):
                listener.exitInitDeclaratorList(self)




    def initDeclaratorList(self):

        localctx = cdbParser.InitDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_initDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455
            self.initDeclarator()
            self.state = 460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cdbParser.Comma:
                self.state = 456
                self.match(cdbParser.Comma)
                self.state = 457
                self.initDeclarator()
                self.state = 462
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(cdbParser.DeclaratorContext,0)


        def Assign(self):
            return self.getToken(cdbParser.Assign, 0)

        def initializer(self):
            return self.getTypedRuleContext(cdbParser.InitializerContext,0)


        def getRuleIndex(self):
            return cdbParser.RULE_initDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclarator" ):
                listener.enterInitDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclarator" ):
                listener.exitInitDeclarator(self)




    def initDeclarator(self):

        localctx = cdbParser.InitDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_initDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self.declarator()
            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cdbParser.Assign:
                self.state = 464
                self.match(cdbParser.Assign)
                self.state = 465
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageClassSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typedef(self):
            return self.getToken(cdbParser.Typedef, 0)

        def Extern(self):
            return self.getToken(cdbParser.Extern, 0)

        def Static(self):
            return self.getToken(cdbParser.Static, 0)

        def ThreadLocal(self):
            return self.getToken(cdbParser.ThreadLocal, 0)

        def Auto(self):
            return self.getToken(cdbParser.Auto, 0)

        def Register(self):
            return self.getToken(cdbParser.Register, 0)

        def getRuleIndex(self):
            return cdbParser.RULE_storageClassSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageClassSpecifier" ):
                listener.enterStorageClassSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageClassSpecifier" ):
                listener.exitStorageClassSpecifier(self)




    def storageClassSpecifier(self):

        localctx = cdbParser.StorageClassSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_storageClassSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            _la = self._input.LA(1)
            if not(((((_la - 31)) & ~0x3f) == 0 and ((1 << (_la - 31)) & ((1 << (cdbParser.Auto - 31)) | (1 << (cdbParser.Extern - 31)) | (1 << (cdbParser.Register - 31)) | (1 << (cdbParser.Static - 31)) | (1 << (cdbParser.Typedef - 31)) | (1 << (cdbParser.ThreadLocal - 31)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Void(self):
            return self.getToken(cdbParser.Void, 0)

        def Char(self):
            return self.getToken(cdbParser.Char, 0)

        def Short(self):
            return self.getToken(cdbParser.Short, 0)

        def Int(self):
            return self.getToken(cdbParser.Int, 0)

        def Long(self):
            return self.getToken(cdbParser.Long, 0)

        def Float(self):
            return self.getToken(cdbParser.Float, 0)

        def Double(self):
            return self.getToken(cdbParser.Double, 0)

        def Signed(self):
            return self.getToken(cdbParser.Signed, 0)

        def Unsigned(self):
            return self.getToken(cdbParser.Unsigned, 0)

        def Bool(self):
            return self.getToken(cdbParser.Bool, 0)

        def Complex(self):
            return self.getToken(cdbParser.Complex, 0)

        def LeftParen(self):
            return self.getToken(cdbParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(cdbParser.RightParen, 0)

        def atomicTypeSpecifier(self):
            return self.getTypedRuleContext(cdbParser.AtomicTypeSpecifierContext,0)


        def structOrUnionSpecifier(self):
            return self.getTypedRuleContext(cdbParser.StructOrUnionSpecifierContext,0)


        def enumSpecifier(self):
            return self.getTypedRuleContext(cdbParser.EnumSpecifierContext,0)


        def typedefName(self):
            return self.getTypedRuleContext(cdbParser.TypedefNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(cdbParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return cdbParser.RULE_typeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpecifier" ):
                listener.enterTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpecifier" ):
                listener.exitTypeSpecifier(self)




    def typeSpecifier(self):

        localctx = cdbParser.TypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_typeSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 484
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cdbParser.T__3, cdbParser.T__4, cdbParser.T__5, cdbParser.Char, cdbParser.Double, cdbParser.Float, cdbParser.Int, cdbParser.Long, cdbParser.Short, cdbParser.Signed, cdbParser.Unsigned, cdbParser.Void, cdbParser.Bool, cdbParser.Complex]:
                self.enterOuterAlt(localctx, 1)
                self.state = 470
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__3) | (1 << cdbParser.T__4) | (1 << cdbParser.T__5) | (1 << cdbParser.Char) | (1 << cdbParser.Double) | (1 << cdbParser.Float) | (1 << cdbParser.Int) | (1 << cdbParser.Long) | (1 << cdbParser.Short) | (1 << cdbParser.Signed) | (1 << cdbParser.Unsigned) | (1 << cdbParser.Void))) != 0) or _la==cdbParser.Bool or _la==cdbParser.Complex):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [cdbParser.T__0]:
                self.enterOuterAlt(localctx, 2)
                self.state = 471
                self.match(cdbParser.T__0)
                self.state = 472
                self.match(cdbParser.LeftParen)
                self.state = 473
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__3) | (1 << cdbParser.T__4) | (1 << cdbParser.T__5))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 474
                self.match(cdbParser.RightParen)
                pass
            elif token in [cdbParser.Atomic]:
                self.enterOuterAlt(localctx, 3)
                self.state = 475
                self.atomicTypeSpecifier()
                pass
            elif token in [cdbParser.Struct, cdbParser.Union]:
                self.enterOuterAlt(localctx, 4)
                self.state = 476
                self.structOrUnionSpecifier()
                pass
            elif token in [cdbParser.Enum]:
                self.enterOuterAlt(localctx, 5)
                self.state = 477
                self.enumSpecifier()
                pass
            elif token in [cdbParser.Identifier]:
                self.enterOuterAlt(localctx, 6)
                self.state = 478
                self.typedefName()
                pass
            elif token in [cdbParser.T__6]:
                self.enterOuterAlt(localctx, 7)
                self.state = 479
                self.match(cdbParser.T__6)
                self.state = 480
                self.match(cdbParser.LeftParen)
                self.state = 481
                self.constantExpression()
                self.state = 482
                self.match(cdbParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructOrUnionSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structOrUnion(self):
            return self.getTypedRuleContext(cdbParser.StructOrUnionContext,0)


        def LeftBrace(self):
            return self.getToken(cdbParser.LeftBrace, 0)

        def structDeclarationList(self):
            return self.getTypedRuleContext(cdbParser.StructDeclarationListContext,0)


        def RightBrace(self):
            return self.getToken(cdbParser.RightBrace, 0)

        def Identifier(self):
            return self.getToken(cdbParser.Identifier, 0)

        def getRuleIndex(self):
            return cdbParser.RULE_structOrUnionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnionSpecifier" ):
                listener.enterStructOrUnionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnionSpecifier" ):
                listener.exitStructOrUnionSpecifier(self)




    def structOrUnionSpecifier(self):

        localctx = cdbParser.StructOrUnionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_structOrUnionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 497
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 486
                self.structOrUnion()
                self.state = 488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cdbParser.Identifier:
                    self.state = 487
                    self.match(cdbParser.Identifier)


                self.state = 490
                self.match(cdbParser.LeftBrace)
                self.state = 491
                self.structDeclarationList()
                self.state = 492
                self.match(cdbParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 494
                self.structOrUnion()
                self.state = 495
                self.match(cdbParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructOrUnionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Struct(self):
            return self.getToken(cdbParser.Struct, 0)

        def Union(self):
            return self.getToken(cdbParser.Union, 0)

        def getRuleIndex(self):
            return cdbParser.RULE_structOrUnion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnion" ):
                listener.enterStructOrUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnion" ):
                listener.exitStructOrUnion(self)




    def structOrUnion(self):

        localctx = cdbParser.StructOrUnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_structOrUnion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            _la = self._input.LA(1)
            if not(_la==cdbParser.Struct or _la==cdbParser.Union):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.StructDeclarationContext)
            else:
                return self.getTypedRuleContext(cdbParser.StructDeclarationContext,i)


        def getRuleIndex(self):
            return cdbParser.RULE_structDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarationList" ):
                listener.enterStructDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarationList" ):
                listener.exitStructDeclarationList(self)




    def structDeclarationList(self):

        localctx = cdbParser.StructDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_structDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 501
                self.structDeclaration()
                self.state = 504 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__0) | (1 << cdbParser.T__3) | (1 << cdbParser.T__4) | (1 << cdbParser.T__5) | (1 << cdbParser.T__6) | (1 << cdbParser.Char) | (1 << cdbParser.Const) | (1 << cdbParser.Double) | (1 << cdbParser.Enum) | (1 << cdbParser.Float) | (1 << cdbParser.Int) | (1 << cdbParser.Long) | (1 << cdbParser.Restrict) | (1 << cdbParser.Short) | (1 << cdbParser.Signed) | (1 << cdbParser.Struct) | (1 << cdbParser.Union) | (1 << cdbParser.Unsigned) | (1 << cdbParser.Void) | (1 << cdbParser.Volatile))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (cdbParser.Atomic - 67)) | (1 << (cdbParser.Bool - 67)) | (1 << (cdbParser.Complex - 67)) | (1 << (cdbParser.StaticAssert - 67)) | (1 << (cdbParser.Identifier - 67)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(cdbParser.SpecifierQualifierListContext,0)


        def structDeclaratorList(self):
            return self.getTypedRuleContext(cdbParser.StructDeclaratorListContext,0)


        def Semi(self):
            return self.getToken(cdbParser.Semi, 0)

        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(cdbParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return cdbParser.RULE_structDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaration" ):
                listener.enterStructDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaration" ):
                listener.exitStructDeclaration(self)




    def structDeclaration(self):

        localctx = cdbParser.StructDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_structDeclaration)
        try:
            self.state = 514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 506
                self.specifierQualifierList()
                self.state = 507
                self.structDeclaratorList()
                self.state = 508
                self.match(cdbParser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 510
                self.specifierQualifierList()
                self.state = 511
                self.match(cdbParser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 513
                self.staticAssertDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecifierQualifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self):
            return self.getTypedRuleContext(cdbParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(cdbParser.TypeQualifierContext,0)


        def specifierQualifierList(self):
            return self.getTypedRuleContext(cdbParser.SpecifierQualifierListContext,0)


        def getRuleIndex(self):
            return cdbParser.RULE_specifierQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecifierQualifierList" ):
                listener.enterSpecifierQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecifierQualifierList" ):
                listener.exitSpecifierQualifierList(self)




    def specifierQualifierList(self):

        localctx = cdbParser.SpecifierQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_specifierQualifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 516
                self.typeSpecifier()
                pass

            elif la_ == 2:
                self.state = 517
                self.typeQualifier()
                pass


            self.state = 521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 520
                self.specifierQualifierList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.StructDeclaratorContext)
            else:
                return self.getTypedRuleContext(cdbParser.StructDeclaratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Comma)
            else:
                return self.getToken(cdbParser.Comma, i)

        def getRuleIndex(self):
            return cdbParser.RULE_structDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaratorList" ):
                listener.enterStructDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaratorList" ):
                listener.exitStructDeclaratorList(self)




    def structDeclaratorList(self):

        localctx = cdbParser.StructDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_structDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.structDeclarator()
            self.state = 528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cdbParser.Comma:
                self.state = 524
                self.match(cdbParser.Comma)
                self.state = 525
                self.structDeclarator()
                self.state = 530
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(cdbParser.DeclaratorContext,0)


        def Colon(self):
            return self.getToken(cdbParser.Colon, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(cdbParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return cdbParser.RULE_structDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarator" ):
                listener.enterStructDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarator" ):
                listener.exitStructDeclarator(self)




    def structDeclarator(self):

        localctx = cdbParser.StructDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_structDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 537
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 531
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__8) | (1 << cdbParser.T__10) | (1 << cdbParser.T__11) | (1 << cdbParser.T__12) | (1 << cdbParser.T__13) | (1 << cdbParser.T__14))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (cdbParser.LeftParen - 75)) | (1 << (cdbParser.Star - 75)) | (1 << (cdbParser.Caret - 75)) | (1 << (cdbParser.Identifier - 75)))) != 0):
                    self.state = 532
                    self.declarator()


                self.state = 535
                self.match(cdbParser.Colon)
                self.state = 536
                self.constantExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(cdbParser.Enum, 0)

        def LeftBrace(self):
            return self.getToken(cdbParser.LeftBrace, 0)

        def enumeratorList(self):
            return self.getTypedRuleContext(cdbParser.EnumeratorListContext,0)


        def RightBrace(self):
            return self.getToken(cdbParser.RightBrace, 0)

        def Identifier(self):
            return self.getToken(cdbParser.Identifier, 0)

        def Comma(self):
            return self.getToken(cdbParser.Comma, 0)

        def getRuleIndex(self):
            return cdbParser.RULE_enumSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumSpecifier" ):
                listener.enterEnumSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumSpecifier" ):
                listener.exitEnumSpecifier(self)




    def enumSpecifier(self):

        localctx = cdbParser.EnumSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_enumSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 552
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 539
                self.match(cdbParser.Enum)
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cdbParser.Identifier:
                    self.state = 540
                    self.match(cdbParser.Identifier)


                self.state = 543
                self.match(cdbParser.LeftBrace)
                self.state = 544
                self.enumeratorList()
                self.state = 546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cdbParser.Comma:
                    self.state = 545
                    self.match(cdbParser.Comma)


                self.state = 548
                self.match(cdbParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 550
                self.match(cdbParser.Enum)
                self.state = 551
                self.match(cdbParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.EnumeratorContext)
            else:
                return self.getTypedRuleContext(cdbParser.EnumeratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Comma)
            else:
                return self.getToken(cdbParser.Comma, i)

        def getRuleIndex(self):
            return cdbParser.RULE_enumeratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorList" ):
                listener.enterEnumeratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorList" ):
                listener.exitEnumeratorList(self)




    def enumeratorList(self):

        localctx = cdbParser.EnumeratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_enumeratorList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self.enumerator()
            self.state = 559
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 555
                    self.match(cdbParser.Comma)
                    self.state = 556
                    self.enumerator() 
                self.state = 561
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerationConstant(self):
            return self.getTypedRuleContext(cdbParser.EnumerationConstantContext,0)


        def Assign(self):
            return self.getToken(cdbParser.Assign, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(cdbParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return cdbParser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)




    def enumerator(self):

        localctx = cdbParser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_enumerator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.enumerationConstant()
            self.state = 565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cdbParser.Assign:
                self.state = 563
                self.match(cdbParser.Assign)
                self.state = 564
                self.constantExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerationConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(cdbParser.Identifier, 0)

        def getRuleIndex(self):
            return cdbParser.RULE_enumerationConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerationConstant" ):
                listener.enterEnumerationConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerationConstant" ):
                listener.exitEnumerationConstant(self)




    def enumerationConstant(self):

        localctx = cdbParser.EnumerationConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_enumerationConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 567
            self.match(cdbParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicTypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atomic(self):
            return self.getToken(cdbParser.Atomic, 0)

        def LeftParen(self):
            return self.getToken(cdbParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(cdbParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(cdbParser.RightParen, 0)

        def getRuleIndex(self):
            return cdbParser.RULE_atomicTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicTypeSpecifier" ):
                listener.enterAtomicTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicTypeSpecifier" ):
                listener.exitAtomicTypeSpecifier(self)




    def atomicTypeSpecifier(self):

        localctx = cdbParser.AtomicTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_atomicTypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.match(cdbParser.Atomic)
            self.state = 570
            self.match(cdbParser.LeftParen)
            self.state = 571
            self.typeName()
            self.state = 572
            self.match(cdbParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(cdbParser.Const, 0)

        def Restrict(self):
            return self.getToken(cdbParser.Restrict, 0)

        def Volatile(self):
            return self.getToken(cdbParser.Volatile, 0)

        def Atomic(self):
            return self.getToken(cdbParser.Atomic, 0)

        def getRuleIndex(self):
            return cdbParser.RULE_typeQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifier" ):
                listener.enterTypeQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifier" ):
                listener.exitTypeQualifier(self)




    def typeQualifier(self):

        localctx = cdbParser.TypeQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_typeQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            _la = self._input.LA(1)
            if not(((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & ((1 << (cdbParser.Const - 35)) | (1 << (cdbParser.Restrict - 35)) | (1 << (cdbParser.Volatile - 35)) | (1 << (cdbParser.Atomic - 35)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Inline(self):
            return self.getToken(cdbParser.Inline, 0)

        def Noreturn(self):
            return self.getToken(cdbParser.Noreturn, 0)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(cdbParser.GccAttributeSpecifierContext,0)


        def LeftParen(self):
            return self.getToken(cdbParser.LeftParen, 0)

        def Identifier(self):
            return self.getToken(cdbParser.Identifier, 0)

        def RightParen(self):
            return self.getToken(cdbParser.RightParen, 0)

        def getRuleIndex(self):
            return cdbParser.RULE_functionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSpecifier" ):
                listener.enterFunctionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSpecifier" ):
                listener.exitFunctionSpecifier(self)




    def functionSpecifier(self):

        localctx = cdbParser.FunctionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_functionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 582
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cdbParser.T__7, cdbParser.T__8, cdbParser.Inline, cdbParser.Noreturn]:
                self.enterOuterAlt(localctx, 1)
                self.state = 576
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__7) | (1 << cdbParser.T__8) | (1 << cdbParser.Inline))) != 0) or _la==cdbParser.Noreturn):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [cdbParser.T__16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 577
                self.gccAttributeSpecifier()
                pass
            elif token in [cdbParser.T__9]:
                self.enterOuterAlt(localctx, 3)
                self.state = 578
                self.match(cdbParser.T__9)
                self.state = 579
                self.match(cdbParser.LeftParen)
                self.state = 580
                self.match(cdbParser.Identifier)
                self.state = 581
                self.match(cdbParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignmentSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Alignas(self):
            return self.getToken(cdbParser.Alignas, 0)

        def LeftParen(self):
            return self.getToken(cdbParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(cdbParser.RightParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(cdbParser.TypeNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(cdbParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return cdbParser.RULE_alignmentSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignmentSpecifier" ):
                listener.enterAlignmentSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignmentSpecifier" ):
                listener.exitAlignmentSpecifier(self)




    def alignmentSpecifier(self):

        localctx = cdbParser.AlignmentSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_alignmentSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.match(cdbParser.Alignas)
            self.state = 585
            self.match(cdbParser.LeftParen)
            self.state = 588
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 586
                self.typeName()
                pass

            elif la_ == 2:
                self.state = 587
                self.constantExpression()
                pass


            self.state = 590
            self.match(cdbParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directDeclarator(self):
            return self.getTypedRuleContext(cdbParser.DirectDeclaratorContext,0)


        def pointer(self):
            return self.getTypedRuleContext(cdbParser.PointerContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(cdbParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return cdbParser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)




    def declarator(self):

        localctx = cdbParser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cdbParser.Star or _la==cdbParser.Caret:
                self.state = 592
                self.pointer()


            self.state = 595
            self.directDeclarator(0)
            self.state = 599
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 596
                    self.gccDeclaratorExtension() 
                self.state = 601
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(cdbParser.Identifier, 0)

        def LeftParen(self):
            return self.getToken(cdbParser.LeftParen, 0)

        def declarator(self):
            return self.getTypedRuleContext(cdbParser.DeclaratorContext,0)


        def RightParen(self):
            return self.getToken(cdbParser.RightParen, 0)

        def Colon(self):
            return self.getToken(cdbParser.Colon, 0)

        def DigitSequence(self):
            return self.getToken(cdbParser.DigitSequence, 0)

        def vcSpecificModifer(self):
            return self.getTypedRuleContext(cdbParser.VcSpecificModiferContext,0)


        def directDeclarator(self):
            return self.getTypedRuleContext(cdbParser.DirectDeclaratorContext,0)


        def LeftBracket(self):
            return self.getToken(cdbParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(cdbParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(cdbParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(cdbParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(cdbParser.Static, 0)

        def Star(self):
            return self.getToken(cdbParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(cdbParser.ParameterTypeListContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(cdbParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return cdbParser.RULE_directDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectDeclarator" ):
                listener.enterDirectDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectDeclarator" ):
                listener.exitDirectDeclarator(self)



    def directDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = cdbParser.DirectDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 96
        self.enterRecursionRule(localctx, 96, self.RULE_directDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 603
                self.match(cdbParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 604
                self.match(cdbParser.LeftParen)
                self.state = 605
                self.declarator()
                self.state = 606
                self.match(cdbParser.RightParen)
                pass

            elif la_ == 3:
                self.state = 608
                self.match(cdbParser.Identifier)
                self.state = 609
                self.match(cdbParser.Colon)
                self.state = 610
                self.match(cdbParser.DigitSequence)
                pass

            elif la_ == 4:
                self.state = 611
                self.vcSpecificModifer()
                self.state = 612
                self.match(cdbParser.Identifier)
                pass

            elif la_ == 5:
                self.state = 614
                self.match(cdbParser.LeftParen)
                self.state = 615
                self.vcSpecificModifer()
                self.state = 616
                self.declarator()
                self.state = 617
                self.match(cdbParser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 666
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 664
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                    if la_ == 1:
                        localctx = cdbParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 621
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 622
                        self.match(cdbParser.LeftBracket)
                        self.state = 624
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & ((1 << (cdbParser.Const - 35)) | (1 << (cdbParser.Restrict - 35)) | (1 << (cdbParser.Volatile - 35)) | (1 << (cdbParser.Atomic - 35)))) != 0):
                            self.state = 623
                            self.typeQualifierList()


                        self.state = 627
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__0) | (1 << cdbParser.T__1) | (1 << cdbParser.T__2) | (1 << cdbParser.Sizeof))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (cdbParser.Alignof - 66)) | (1 << (cdbParser.Generic - 66)) | (1 << (cdbParser.LeftParen - 66)) | (1 << (cdbParser.Plus - 66)) | (1 << (cdbParser.PlusPlus - 66)) | (1 << (cdbParser.Minus - 66)) | (1 << (cdbParser.MinusMinus - 66)) | (1 << (cdbParser.Star - 66)) | (1 << (cdbParser.And - 66)) | (1 << (cdbParser.AndAnd - 66)) | (1 << (cdbParser.Not - 66)) | (1 << (cdbParser.Tilde - 66)) | (1 << (cdbParser.Identifier - 66)) | (1 << (cdbParser.Constant - 66)) | (1 << (cdbParser.DigitSequence - 66)) | (1 << (cdbParser.StringLiteral - 66)))) != 0):
                            self.state = 626
                            self.assignmentExpression()


                        self.state = 629
                        self.match(cdbParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = cdbParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 630
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 631
                        self.match(cdbParser.LeftBracket)
                        self.state = 632
                        self.match(cdbParser.Static)
                        self.state = 634
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & ((1 << (cdbParser.Const - 35)) | (1 << (cdbParser.Restrict - 35)) | (1 << (cdbParser.Volatile - 35)) | (1 << (cdbParser.Atomic - 35)))) != 0):
                            self.state = 633
                            self.typeQualifierList()


                        self.state = 636
                        self.assignmentExpression()
                        self.state = 637
                        self.match(cdbParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = cdbParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 639
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 640
                        self.match(cdbParser.LeftBracket)
                        self.state = 641
                        self.typeQualifierList()
                        self.state = 642
                        self.match(cdbParser.Static)
                        self.state = 643
                        self.assignmentExpression()
                        self.state = 644
                        self.match(cdbParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = cdbParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 646
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 647
                        self.match(cdbParser.LeftBracket)
                        self.state = 649
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & ((1 << (cdbParser.Const - 35)) | (1 << (cdbParser.Restrict - 35)) | (1 << (cdbParser.Volatile - 35)) | (1 << (cdbParser.Atomic - 35)))) != 0):
                            self.state = 648
                            self.typeQualifierList()


                        self.state = 651
                        self.match(cdbParser.Star)
                        self.state = 652
                        self.match(cdbParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = cdbParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 653
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 654
                        self.match(cdbParser.LeftParen)
                        self.state = 655
                        self.parameterTypeList()
                        self.state = 656
                        self.match(cdbParser.RightParen)
                        pass

                    elif la_ == 6:
                        localctx = cdbParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 658
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 659
                        self.match(cdbParser.LeftParen)
                        self.state = 661
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==cdbParser.Identifier:
                            self.state = 660
                            self.identifierList()


                        self.state = 663
                        self.match(cdbParser.RightParen)
                        pass

             
                self.state = 668
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class VcSpecificModiferContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cdbParser.RULE_vcSpecificModifer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVcSpecificModifer" ):
                listener.enterVcSpecificModifer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVcSpecificModifer" ):
                listener.exitVcSpecificModifer(self)




    def vcSpecificModifer(self):

        localctx = cdbParser.VcSpecificModiferContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_vcSpecificModifer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__8) | (1 << cdbParser.T__10) | (1 << cdbParser.T__11) | (1 << cdbParser.T__12) | (1 << cdbParser.T__13) | (1 << cdbParser.T__14))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccDeclaratorExtensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(cdbParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(cdbParser.RightParen, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.StringLiteral)
            else:
                return self.getToken(cdbParser.StringLiteral, i)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(cdbParser.GccAttributeSpecifierContext,0)


        def getRuleIndex(self):
            return cdbParser.RULE_gccDeclaratorExtension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccDeclaratorExtension" ):
                listener.enterGccDeclaratorExtension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccDeclaratorExtension" ):
                listener.exitGccDeclaratorExtension(self)




    def gccDeclaratorExtension(self):

        localctx = cdbParser.GccDeclaratorExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_gccDeclaratorExtension)
        self._la = 0 # Token type
        try:
            self.state = 680
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cdbParser.T__15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 671
                self.match(cdbParser.T__15)
                self.state = 672
                self.match(cdbParser.LeftParen)
                self.state = 674 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 673
                    self.match(cdbParser.StringLiteral)
                    self.state = 676 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==cdbParser.StringLiteral):
                        break

                self.state = 678
                self.match(cdbParser.RightParen)
                pass
            elif token in [cdbParser.T__16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 679
                self.gccAttributeSpecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.LeftParen)
            else:
                return self.getToken(cdbParser.LeftParen, i)

        def gccAttributeList(self):
            return self.getTypedRuleContext(cdbParser.GccAttributeListContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.RightParen)
            else:
                return self.getToken(cdbParser.RightParen, i)

        def getRuleIndex(self):
            return cdbParser.RULE_gccAttributeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttributeSpecifier" ):
                listener.enterGccAttributeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttributeSpecifier" ):
                listener.exitGccAttributeSpecifier(self)




    def gccAttributeSpecifier(self):

        localctx = cdbParser.GccAttributeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_gccAttributeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 682
            self.match(cdbParser.T__16)
            self.state = 683
            self.match(cdbParser.LeftParen)
            self.state = 684
            self.match(cdbParser.LeftParen)
            self.state = 685
            self.gccAttributeList()
            self.state = 686
            self.match(cdbParser.RightParen)
            self.state = 687
            self.match(cdbParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gccAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.GccAttributeContext)
            else:
                return self.getTypedRuleContext(cdbParser.GccAttributeContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Comma)
            else:
                return self.getToken(cdbParser.Comma, i)

        def getRuleIndex(self):
            return cdbParser.RULE_gccAttributeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttributeList" ):
                listener.enterGccAttributeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttributeList" ):
                listener.exitGccAttributeList(self)




    def gccAttributeList(self):

        localctx = cdbParser.GccAttributeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_gccAttributeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__0) | (1 << cdbParser.T__1) | (1 << cdbParser.T__2) | (1 << cdbParser.T__3) | (1 << cdbParser.T__4) | (1 << cdbParser.T__5) | (1 << cdbParser.T__6) | (1 << cdbParser.T__7) | (1 << cdbParser.T__8) | (1 << cdbParser.T__9) | (1 << cdbParser.T__10) | (1 << cdbParser.T__11) | (1 << cdbParser.T__12) | (1 << cdbParser.T__13) | (1 << cdbParser.T__14) | (1 << cdbParser.T__15) | (1 << cdbParser.T__16) | (1 << cdbParser.T__17) | (1 << cdbParser.T__18) | (1 << cdbParser.T__19) | (1 << cdbParser.T__20) | (1 << cdbParser.T__21) | (1 << cdbParser.T__22) | (1 << cdbParser.T__23) | (1 << cdbParser.T__24) | (1 << cdbParser.T__25) | (1 << cdbParser.T__26) | (1 << cdbParser.T__27) | (1 << cdbParser.T__28) | (1 << cdbParser.T__29) | (1 << cdbParser.Auto) | (1 << cdbParser.Break) | (1 << cdbParser.Case) | (1 << cdbParser.Char) | (1 << cdbParser.Const) | (1 << cdbParser.Continue) | (1 << cdbParser.Default) | (1 << cdbParser.Do) | (1 << cdbParser.Double) | (1 << cdbParser.Else) | (1 << cdbParser.Enum) | (1 << cdbParser.Extern) | (1 << cdbParser.Float) | (1 << cdbParser.For) | (1 << cdbParser.Goto) | (1 << cdbParser.If) | (1 << cdbParser.Inline) | (1 << cdbParser.Int) | (1 << cdbParser.Long) | (1 << cdbParser.Register) | (1 << cdbParser.Restrict) | (1 << cdbParser.Return) | (1 << cdbParser.Short) | (1 << cdbParser.Signed) | (1 << cdbParser.Sizeof) | (1 << cdbParser.Static) | (1 << cdbParser.Struct) | (1 << cdbParser.Switch) | (1 << cdbParser.Typedef) | (1 << cdbParser.Union) | (1 << cdbParser.Unsigned) | (1 << cdbParser.Void) | (1 << cdbParser.Volatile))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (cdbParser.While - 64)) | (1 << (cdbParser.Alignas - 64)) | (1 << (cdbParser.Alignof - 64)) | (1 << (cdbParser.Atomic - 64)) | (1 << (cdbParser.Bool - 64)) | (1 << (cdbParser.Complex - 64)) | (1 << (cdbParser.Generic - 64)) | (1 << (cdbParser.Imaginary - 64)) | (1 << (cdbParser.Noreturn - 64)) | (1 << (cdbParser.StaticAssert - 64)) | (1 << (cdbParser.ThreadLocal - 64)) | (1 << (cdbParser.LeftBracket - 64)) | (1 << (cdbParser.RightBracket - 64)) | (1 << (cdbParser.LeftBrace - 64)) | (1 << (cdbParser.RightBrace - 64)) | (1 << (cdbParser.Less - 64)) | (1 << (cdbParser.LessEqual - 64)) | (1 << (cdbParser.Greater - 64)) | (1 << (cdbParser.GreaterEqual - 64)) | (1 << (cdbParser.LeftShift - 64)) | (1 << (cdbParser.RightShift - 64)) | (1 << (cdbParser.Plus - 64)) | (1 << (cdbParser.PlusPlus - 64)) | (1 << (cdbParser.Minus - 64)) | (1 << (cdbParser.MinusMinus - 64)) | (1 << (cdbParser.Star - 64)) | (1 << (cdbParser.Div - 64)) | (1 << (cdbParser.Mod - 64)) | (1 << (cdbParser.And - 64)) | (1 << (cdbParser.Or - 64)) | (1 << (cdbParser.AndAnd - 64)) | (1 << (cdbParser.OrOr - 64)) | (1 << (cdbParser.Caret - 64)) | (1 << (cdbParser.Not - 64)) | (1 << (cdbParser.Tilde - 64)) | (1 << (cdbParser.Question - 64)) | (1 << (cdbParser.Colon - 64)) | (1 << (cdbParser.Semi - 64)) | (1 << (cdbParser.Assign - 64)) | (1 << (cdbParser.StarAssign - 64)) | (1 << (cdbParser.DivAssign - 64)) | (1 << (cdbParser.ModAssign - 64)) | (1 << (cdbParser.PlusAssign - 64)) | (1 << (cdbParser.MinusAssign - 64)) | (1 << (cdbParser.LeftShiftAssign - 64)) | (1 << (cdbParser.RightShiftAssign - 64)) | (1 << (cdbParser.AndAssign - 64)) | (1 << (cdbParser.XorAssign - 64)) | (1 << (cdbParser.OrAssign - 64)) | (1 << (cdbParser.Equal - 64)) | (1 << (cdbParser.NotEqual - 64)) | (1 << (cdbParser.Arrow - 64)) | (1 << (cdbParser.Dot - 64)) | (1 << (cdbParser.Ellipsis - 64)) | (1 << (cdbParser.Identifier - 64)) | (1 << (cdbParser.Constant - 64)) | (1 << (cdbParser.DigitSequence - 64)) | (1 << (cdbParser.StringLiteral - 64)) | (1 << (cdbParser.ComplexDefine - 64)) | (1 << (cdbParser.IncludeDirective - 64)) | (1 << (cdbParser.AsmBlock - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (cdbParser.LineAfterPreprocessing - 128)) | (1 << (cdbParser.LineDirective - 128)) | (1 << (cdbParser.PragmaDirective - 128)) | (1 << (cdbParser.Whitespace - 128)) | (1 << (cdbParser.Newline - 128)) | (1 << (cdbParser.BlockComment - 128)) | (1 << (cdbParser.LineComment - 128)))) != 0):
                self.state = 689
                self.gccAttribute()


            self.state = 698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cdbParser.Comma:
                self.state = 692
                self.match(cdbParser.Comma)
                self.state = 694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__0) | (1 << cdbParser.T__1) | (1 << cdbParser.T__2) | (1 << cdbParser.T__3) | (1 << cdbParser.T__4) | (1 << cdbParser.T__5) | (1 << cdbParser.T__6) | (1 << cdbParser.T__7) | (1 << cdbParser.T__8) | (1 << cdbParser.T__9) | (1 << cdbParser.T__10) | (1 << cdbParser.T__11) | (1 << cdbParser.T__12) | (1 << cdbParser.T__13) | (1 << cdbParser.T__14) | (1 << cdbParser.T__15) | (1 << cdbParser.T__16) | (1 << cdbParser.T__17) | (1 << cdbParser.T__18) | (1 << cdbParser.T__19) | (1 << cdbParser.T__20) | (1 << cdbParser.T__21) | (1 << cdbParser.T__22) | (1 << cdbParser.T__23) | (1 << cdbParser.T__24) | (1 << cdbParser.T__25) | (1 << cdbParser.T__26) | (1 << cdbParser.T__27) | (1 << cdbParser.T__28) | (1 << cdbParser.T__29) | (1 << cdbParser.Auto) | (1 << cdbParser.Break) | (1 << cdbParser.Case) | (1 << cdbParser.Char) | (1 << cdbParser.Const) | (1 << cdbParser.Continue) | (1 << cdbParser.Default) | (1 << cdbParser.Do) | (1 << cdbParser.Double) | (1 << cdbParser.Else) | (1 << cdbParser.Enum) | (1 << cdbParser.Extern) | (1 << cdbParser.Float) | (1 << cdbParser.For) | (1 << cdbParser.Goto) | (1 << cdbParser.If) | (1 << cdbParser.Inline) | (1 << cdbParser.Int) | (1 << cdbParser.Long) | (1 << cdbParser.Register) | (1 << cdbParser.Restrict) | (1 << cdbParser.Return) | (1 << cdbParser.Short) | (1 << cdbParser.Signed) | (1 << cdbParser.Sizeof) | (1 << cdbParser.Static) | (1 << cdbParser.Struct) | (1 << cdbParser.Switch) | (1 << cdbParser.Typedef) | (1 << cdbParser.Union) | (1 << cdbParser.Unsigned) | (1 << cdbParser.Void) | (1 << cdbParser.Volatile))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (cdbParser.While - 64)) | (1 << (cdbParser.Alignas - 64)) | (1 << (cdbParser.Alignof - 64)) | (1 << (cdbParser.Atomic - 64)) | (1 << (cdbParser.Bool - 64)) | (1 << (cdbParser.Complex - 64)) | (1 << (cdbParser.Generic - 64)) | (1 << (cdbParser.Imaginary - 64)) | (1 << (cdbParser.Noreturn - 64)) | (1 << (cdbParser.StaticAssert - 64)) | (1 << (cdbParser.ThreadLocal - 64)) | (1 << (cdbParser.LeftBracket - 64)) | (1 << (cdbParser.RightBracket - 64)) | (1 << (cdbParser.LeftBrace - 64)) | (1 << (cdbParser.RightBrace - 64)) | (1 << (cdbParser.Less - 64)) | (1 << (cdbParser.LessEqual - 64)) | (1 << (cdbParser.Greater - 64)) | (1 << (cdbParser.GreaterEqual - 64)) | (1 << (cdbParser.LeftShift - 64)) | (1 << (cdbParser.RightShift - 64)) | (1 << (cdbParser.Plus - 64)) | (1 << (cdbParser.PlusPlus - 64)) | (1 << (cdbParser.Minus - 64)) | (1 << (cdbParser.MinusMinus - 64)) | (1 << (cdbParser.Star - 64)) | (1 << (cdbParser.Div - 64)) | (1 << (cdbParser.Mod - 64)) | (1 << (cdbParser.And - 64)) | (1 << (cdbParser.Or - 64)) | (1 << (cdbParser.AndAnd - 64)) | (1 << (cdbParser.OrOr - 64)) | (1 << (cdbParser.Caret - 64)) | (1 << (cdbParser.Not - 64)) | (1 << (cdbParser.Tilde - 64)) | (1 << (cdbParser.Question - 64)) | (1 << (cdbParser.Colon - 64)) | (1 << (cdbParser.Semi - 64)) | (1 << (cdbParser.Assign - 64)) | (1 << (cdbParser.StarAssign - 64)) | (1 << (cdbParser.DivAssign - 64)) | (1 << (cdbParser.ModAssign - 64)) | (1 << (cdbParser.PlusAssign - 64)) | (1 << (cdbParser.MinusAssign - 64)) | (1 << (cdbParser.LeftShiftAssign - 64)) | (1 << (cdbParser.RightShiftAssign - 64)) | (1 << (cdbParser.AndAssign - 64)) | (1 << (cdbParser.XorAssign - 64)) | (1 << (cdbParser.OrAssign - 64)) | (1 << (cdbParser.Equal - 64)) | (1 << (cdbParser.NotEqual - 64)) | (1 << (cdbParser.Arrow - 64)) | (1 << (cdbParser.Dot - 64)) | (1 << (cdbParser.Ellipsis - 64)) | (1 << (cdbParser.Identifier - 64)) | (1 << (cdbParser.Constant - 64)) | (1 << (cdbParser.DigitSequence - 64)) | (1 << (cdbParser.StringLiteral - 64)) | (1 << (cdbParser.ComplexDefine - 64)) | (1 << (cdbParser.IncludeDirective - 64)) | (1 << (cdbParser.AsmBlock - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (cdbParser.LineAfterPreprocessing - 128)) | (1 << (cdbParser.LineDirective - 128)) | (1 << (cdbParser.PragmaDirective - 128)) | (1 << (cdbParser.Whitespace - 128)) | (1 << (cdbParser.Newline - 128)) | (1 << (cdbParser.BlockComment - 128)) | (1 << (cdbParser.LineComment - 128)))) != 0):
                    self.state = 693
                    self.gccAttribute()


                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Comma(self):
            return self.getToken(cdbParser.Comma, 0)

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.LeftParen)
            else:
                return self.getToken(cdbParser.LeftParen, i)

        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.RightParen)
            else:
                return self.getToken(cdbParser.RightParen, i)

        def argumentExpressionList(self):
            return self.getTypedRuleContext(cdbParser.ArgumentExpressionListContext,0)


        def getRuleIndex(self):
            return cdbParser.RULE_gccAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttribute" ):
                listener.enterGccAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttribute" ):
                listener.exitGccAttribute(self)




    def gccAttribute(self):

        localctx = cdbParser.GccAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_gccAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            _la = self._input.LA(1)
            if _la <= 0 or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (cdbParser.LeftParen - 75)) | (1 << (cdbParser.RightParen - 75)) | (1 << (cdbParser.Comma - 75)))) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cdbParser.LeftParen:
                self.state = 702
                self.match(cdbParser.LeftParen)
                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__0) | (1 << cdbParser.T__1) | (1 << cdbParser.T__2) | (1 << cdbParser.Sizeof))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (cdbParser.Alignof - 66)) | (1 << (cdbParser.Generic - 66)) | (1 << (cdbParser.LeftParen - 66)) | (1 << (cdbParser.Plus - 66)) | (1 << (cdbParser.PlusPlus - 66)) | (1 << (cdbParser.Minus - 66)) | (1 << (cdbParser.MinusMinus - 66)) | (1 << (cdbParser.Star - 66)) | (1 << (cdbParser.And - 66)) | (1 << (cdbParser.AndAnd - 66)) | (1 << (cdbParser.Not - 66)) | (1 << (cdbParser.Tilde - 66)) | (1 << (cdbParser.Identifier - 66)) | (1 << (cdbParser.Constant - 66)) | (1 << (cdbParser.DigitSequence - 66)) | (1 << (cdbParser.StringLiteral - 66)))) != 0):
                    self.state = 703
                    self.argumentExpressionList()


                self.state = 706
                self.match(cdbParser.RightParen)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedParenthesesBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.LeftParen)
            else:
                return self.getToken(cdbParser.LeftParen, i)

        def nestedParenthesesBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.NestedParenthesesBlockContext)
            else:
                return self.getTypedRuleContext(cdbParser.NestedParenthesesBlockContext,i)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.RightParen)
            else:
                return self.getToken(cdbParser.RightParen, i)

        def getRuleIndex(self):
            return cdbParser.RULE_nestedParenthesesBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedParenthesesBlock" ):
                listener.enterNestedParenthesesBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedParenthesesBlock" ):
                listener.exitNestedParenthesesBlock(self)




    def nestedParenthesesBlock(self):

        localctx = cdbParser.NestedParenthesesBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_nestedParenthesesBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__0) | (1 << cdbParser.T__1) | (1 << cdbParser.T__2) | (1 << cdbParser.T__3) | (1 << cdbParser.T__4) | (1 << cdbParser.T__5) | (1 << cdbParser.T__6) | (1 << cdbParser.T__7) | (1 << cdbParser.T__8) | (1 << cdbParser.T__9) | (1 << cdbParser.T__10) | (1 << cdbParser.T__11) | (1 << cdbParser.T__12) | (1 << cdbParser.T__13) | (1 << cdbParser.T__14) | (1 << cdbParser.T__15) | (1 << cdbParser.T__16) | (1 << cdbParser.T__17) | (1 << cdbParser.T__18) | (1 << cdbParser.T__19) | (1 << cdbParser.T__20) | (1 << cdbParser.T__21) | (1 << cdbParser.T__22) | (1 << cdbParser.T__23) | (1 << cdbParser.T__24) | (1 << cdbParser.T__25) | (1 << cdbParser.T__26) | (1 << cdbParser.T__27) | (1 << cdbParser.T__28) | (1 << cdbParser.T__29) | (1 << cdbParser.Auto) | (1 << cdbParser.Break) | (1 << cdbParser.Case) | (1 << cdbParser.Char) | (1 << cdbParser.Const) | (1 << cdbParser.Continue) | (1 << cdbParser.Default) | (1 << cdbParser.Do) | (1 << cdbParser.Double) | (1 << cdbParser.Else) | (1 << cdbParser.Enum) | (1 << cdbParser.Extern) | (1 << cdbParser.Float) | (1 << cdbParser.For) | (1 << cdbParser.Goto) | (1 << cdbParser.If) | (1 << cdbParser.Inline) | (1 << cdbParser.Int) | (1 << cdbParser.Long) | (1 << cdbParser.Register) | (1 << cdbParser.Restrict) | (1 << cdbParser.Return) | (1 << cdbParser.Short) | (1 << cdbParser.Signed) | (1 << cdbParser.Sizeof) | (1 << cdbParser.Static) | (1 << cdbParser.Struct) | (1 << cdbParser.Switch) | (1 << cdbParser.Typedef) | (1 << cdbParser.Union) | (1 << cdbParser.Unsigned) | (1 << cdbParser.Void) | (1 << cdbParser.Volatile))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (cdbParser.While - 64)) | (1 << (cdbParser.Alignas - 64)) | (1 << (cdbParser.Alignof - 64)) | (1 << (cdbParser.Atomic - 64)) | (1 << (cdbParser.Bool - 64)) | (1 << (cdbParser.Complex - 64)) | (1 << (cdbParser.Generic - 64)) | (1 << (cdbParser.Imaginary - 64)) | (1 << (cdbParser.Noreturn - 64)) | (1 << (cdbParser.StaticAssert - 64)) | (1 << (cdbParser.ThreadLocal - 64)) | (1 << (cdbParser.LeftParen - 64)) | (1 << (cdbParser.LeftBracket - 64)) | (1 << (cdbParser.RightBracket - 64)) | (1 << (cdbParser.LeftBrace - 64)) | (1 << (cdbParser.RightBrace - 64)) | (1 << (cdbParser.Less - 64)) | (1 << (cdbParser.LessEqual - 64)) | (1 << (cdbParser.Greater - 64)) | (1 << (cdbParser.GreaterEqual - 64)) | (1 << (cdbParser.LeftShift - 64)) | (1 << (cdbParser.RightShift - 64)) | (1 << (cdbParser.Plus - 64)) | (1 << (cdbParser.PlusPlus - 64)) | (1 << (cdbParser.Minus - 64)) | (1 << (cdbParser.MinusMinus - 64)) | (1 << (cdbParser.Star - 64)) | (1 << (cdbParser.Div - 64)) | (1 << (cdbParser.Mod - 64)) | (1 << (cdbParser.And - 64)) | (1 << (cdbParser.Or - 64)) | (1 << (cdbParser.AndAnd - 64)) | (1 << (cdbParser.OrOr - 64)) | (1 << (cdbParser.Caret - 64)) | (1 << (cdbParser.Not - 64)) | (1 << (cdbParser.Tilde - 64)) | (1 << (cdbParser.Question - 64)) | (1 << (cdbParser.Colon - 64)) | (1 << (cdbParser.Semi - 64)) | (1 << (cdbParser.Comma - 64)) | (1 << (cdbParser.Assign - 64)) | (1 << (cdbParser.StarAssign - 64)) | (1 << (cdbParser.DivAssign - 64)) | (1 << (cdbParser.ModAssign - 64)) | (1 << (cdbParser.PlusAssign - 64)) | (1 << (cdbParser.MinusAssign - 64)) | (1 << (cdbParser.LeftShiftAssign - 64)) | (1 << (cdbParser.RightShiftAssign - 64)) | (1 << (cdbParser.AndAssign - 64)) | (1 << (cdbParser.XorAssign - 64)) | (1 << (cdbParser.OrAssign - 64)) | (1 << (cdbParser.Equal - 64)) | (1 << (cdbParser.NotEqual - 64)) | (1 << (cdbParser.Arrow - 64)) | (1 << (cdbParser.Dot - 64)) | (1 << (cdbParser.Ellipsis - 64)) | (1 << (cdbParser.Identifier - 64)) | (1 << (cdbParser.Constant - 64)) | (1 << (cdbParser.DigitSequence - 64)) | (1 << (cdbParser.StringLiteral - 64)) | (1 << (cdbParser.ComplexDefine - 64)) | (1 << (cdbParser.IncludeDirective - 64)) | (1 << (cdbParser.AsmBlock - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (cdbParser.LineAfterPreprocessing - 128)) | (1 << (cdbParser.LineDirective - 128)) | (1 << (cdbParser.PragmaDirective - 128)) | (1 << (cdbParser.Whitespace - 128)) | (1 << (cdbParser.Newline - 128)) | (1 << (cdbParser.BlockComment - 128)) | (1 << (cdbParser.LineComment - 128)))) != 0):
                self.state = 714
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [cdbParser.T__0, cdbParser.T__1, cdbParser.T__2, cdbParser.T__3, cdbParser.T__4, cdbParser.T__5, cdbParser.T__6, cdbParser.T__7, cdbParser.T__8, cdbParser.T__9, cdbParser.T__10, cdbParser.T__11, cdbParser.T__12, cdbParser.T__13, cdbParser.T__14, cdbParser.T__15, cdbParser.T__16, cdbParser.T__17, cdbParser.T__18, cdbParser.T__19, cdbParser.T__20, cdbParser.T__21, cdbParser.T__22, cdbParser.T__23, cdbParser.T__24, cdbParser.T__25, cdbParser.T__26, cdbParser.T__27, cdbParser.T__28, cdbParser.T__29, cdbParser.Auto, cdbParser.Break, cdbParser.Case, cdbParser.Char, cdbParser.Const, cdbParser.Continue, cdbParser.Default, cdbParser.Do, cdbParser.Double, cdbParser.Else, cdbParser.Enum, cdbParser.Extern, cdbParser.Float, cdbParser.For, cdbParser.Goto, cdbParser.If, cdbParser.Inline, cdbParser.Int, cdbParser.Long, cdbParser.Register, cdbParser.Restrict, cdbParser.Return, cdbParser.Short, cdbParser.Signed, cdbParser.Sizeof, cdbParser.Static, cdbParser.Struct, cdbParser.Switch, cdbParser.Typedef, cdbParser.Union, cdbParser.Unsigned, cdbParser.Void, cdbParser.Volatile, cdbParser.While, cdbParser.Alignas, cdbParser.Alignof, cdbParser.Atomic, cdbParser.Bool, cdbParser.Complex, cdbParser.Generic, cdbParser.Imaginary, cdbParser.Noreturn, cdbParser.StaticAssert, cdbParser.ThreadLocal, cdbParser.LeftBracket, cdbParser.RightBracket, cdbParser.LeftBrace, cdbParser.RightBrace, cdbParser.Less, cdbParser.LessEqual, cdbParser.Greater, cdbParser.GreaterEqual, cdbParser.LeftShift, cdbParser.RightShift, cdbParser.Plus, cdbParser.PlusPlus, cdbParser.Minus, cdbParser.MinusMinus, cdbParser.Star, cdbParser.Div, cdbParser.Mod, cdbParser.And, cdbParser.Or, cdbParser.AndAnd, cdbParser.OrOr, cdbParser.Caret, cdbParser.Not, cdbParser.Tilde, cdbParser.Question, cdbParser.Colon, cdbParser.Semi, cdbParser.Comma, cdbParser.Assign, cdbParser.StarAssign, cdbParser.DivAssign, cdbParser.ModAssign, cdbParser.PlusAssign, cdbParser.MinusAssign, cdbParser.LeftShiftAssign, cdbParser.RightShiftAssign, cdbParser.AndAssign, cdbParser.XorAssign, cdbParser.OrAssign, cdbParser.Equal, cdbParser.NotEqual, cdbParser.Arrow, cdbParser.Dot, cdbParser.Ellipsis, cdbParser.Identifier, cdbParser.Constant, cdbParser.DigitSequence, cdbParser.StringLiteral, cdbParser.ComplexDefine, cdbParser.IncludeDirective, cdbParser.AsmBlock, cdbParser.LineAfterPreprocessing, cdbParser.LineDirective, cdbParser.PragmaDirective, cdbParser.Whitespace, cdbParser.Newline, cdbParser.BlockComment, cdbParser.LineComment]:
                    self.state = 709
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==cdbParser.LeftParen or _la==cdbParser.RightParen:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [cdbParser.LeftParen]:
                    self.state = 710
                    self.match(cdbParser.LeftParen)
                    self.state = 711
                    self.nestedParenthesesBlock()
                    self.state = 712
                    self.match(cdbParser.RightParen)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 718
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Star)
            else:
                return self.getToken(cdbParser.Star, i)

        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Caret)
            else:
                return self.getToken(cdbParser.Caret, i)

        def typeQualifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.TypeQualifierListContext)
            else:
                return self.getTypedRuleContext(cdbParser.TypeQualifierListContext,i)


        def getRuleIndex(self):
            return cdbParser.RULE_pointer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointer" ):
                listener.enterPointer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointer" ):
                listener.exitPointer(self)




    def pointer(self):

        localctx = cdbParser.PointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_pointer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 719
                _la = self._input.LA(1)
                if not(_la==cdbParser.Star or _la==cdbParser.Caret):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & ((1 << (cdbParser.Const - 35)) | (1 << (cdbParser.Restrict - 35)) | (1 << (cdbParser.Volatile - 35)) | (1 << (cdbParser.Atomic - 35)))) != 0):
                    self.state = 720
                    self.typeQualifierList()


                self.state = 725 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==cdbParser.Star or _la==cdbParser.Caret):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeQualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.TypeQualifierContext)
            else:
                return self.getTypedRuleContext(cdbParser.TypeQualifierContext,i)


        def getRuleIndex(self):
            return cdbParser.RULE_typeQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifierList" ):
                listener.enterTypeQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifierList" ):
                listener.exitTypeQualifierList(self)




    def typeQualifierList(self):

        localctx = cdbParser.TypeQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_typeQualifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 727
                self.typeQualifier()
                self.state = 730 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & ((1 << (cdbParser.Const - 35)) | (1 << (cdbParser.Restrict - 35)) | (1 << (cdbParser.Volatile - 35)) | (1 << (cdbParser.Atomic - 35)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterTypeListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(cdbParser.ParameterListContext,0)


        def Comma(self):
            return self.getToken(cdbParser.Comma, 0)

        def Ellipsis(self):
            return self.getToken(cdbParser.Ellipsis, 0)

        def getRuleIndex(self):
            return cdbParser.RULE_parameterTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterTypeList" ):
                listener.enterParameterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterTypeList" ):
                listener.exitParameterTypeList(self)




    def parameterTypeList(self):

        localctx = cdbParser.ParameterTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_parameterTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.parameterList()
            self.state = 735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cdbParser.Comma:
                self.state = 733
                self.match(cdbParser.Comma)
                self.state = 734
                self.match(cdbParser.Ellipsis)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.ParameterDeclarationContext)
            else:
                return self.getTypedRuleContext(cdbParser.ParameterDeclarationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Comma)
            else:
                return self.getToken(cdbParser.Comma, i)

        def getRuleIndex(self):
            return cdbParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)




    def parameterList(self):

        localctx = cdbParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_parameterList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 737
            self.parameterDeclaration()
            self.state = 742
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 738
                    self.match(cdbParser.Comma)
                    self.state = 739
                    self.parameterDeclaration() 
                self.state = 744
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(cdbParser.DeclarationSpecifiersContext,0)


        def declarator(self):
            return self.getTypedRuleContext(cdbParser.DeclaratorContext,0)


        def declarationSpecifiers2(self):
            return self.getTypedRuleContext(cdbParser.DeclarationSpecifiers2Context,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(cdbParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return cdbParser.RULE_parameterDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDeclaration" ):
                listener.enterParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDeclaration" ):
                listener.exitParameterDeclaration(self)




    def parameterDeclaration(self):

        localctx = cdbParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_parameterDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 752
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 745
                self.declarationSpecifiers()
                self.state = 746
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 748
                self.declarationSpecifiers2()
                self.state = 750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (cdbParser.LeftParen - 75)) | (1 << (cdbParser.LeftBracket - 75)) | (1 << (cdbParser.Star - 75)) | (1 << (cdbParser.Caret - 75)))) != 0):
                    self.state = 749
                    self.abstractDeclarator()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Identifier)
            else:
                return self.getToken(cdbParser.Identifier, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Comma)
            else:
                return self.getToken(cdbParser.Comma, i)

        def getRuleIndex(self):
            return cdbParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = cdbParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self.match(cdbParser.Identifier)
            self.state = 759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cdbParser.Comma:
                self.state = 755
                self.match(cdbParser.Comma)
                self.state = 756
                self.match(cdbParser.Identifier)
                self.state = 761
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(cdbParser.SpecifierQualifierListContext,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(cdbParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return cdbParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)




    def typeName(self):

        localctx = cdbParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_typeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.specifierQualifierList()
            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (cdbParser.LeftParen - 75)) | (1 << (cdbParser.LeftBracket - 75)) | (1 << (cdbParser.Star - 75)) | (1 << (cdbParser.Caret - 75)))) != 0):
                self.state = 763
                self.abstractDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointer(self):
            return self.getTypedRuleContext(cdbParser.PointerContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(cdbParser.DirectAbstractDeclaratorContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(cdbParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return cdbParser.RULE_abstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractDeclarator" ):
                listener.enterAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractDeclarator" ):
                listener.exitAbstractDeclarator(self)




    def abstractDeclarator(self):

        localctx = cdbParser.AbstractDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_abstractDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 766
                self.pointer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cdbParser.Star or _la==cdbParser.Caret:
                    self.state = 767
                    self.pointer()


                self.state = 770
                self.directAbstractDeclarator(0)
                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==cdbParser.T__15 or _la==cdbParser.T__16:
                    self.state = 771
                    self.gccDeclaratorExtension()
                    self.state = 776
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectAbstractDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(cdbParser.LeftParen, 0)

        def abstractDeclarator(self):
            return self.getTypedRuleContext(cdbParser.AbstractDeclaratorContext,0)


        def RightParen(self):
            return self.getToken(cdbParser.RightParen, 0)

        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(cdbParser.GccDeclaratorExtensionContext,i)


        def LeftBracket(self):
            return self.getToken(cdbParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(cdbParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(cdbParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(cdbParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(cdbParser.Static, 0)

        def Star(self):
            return self.getToken(cdbParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(cdbParser.ParameterTypeListContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(cdbParser.DirectAbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return cdbParser.RULE_directAbstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectAbstractDeclarator" ):
                listener.enterDirectAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectAbstractDeclarator" ):
                listener.exitDirectAbstractDeclarator(self)



    def directAbstractDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = cdbParser.DirectAbstractDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 126
        self.enterRecursionRule(localctx, 126, self.RULE_directAbstractDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 780
                self.match(cdbParser.LeftParen)
                self.state = 781
                self.abstractDeclarator()
                self.state = 782
                self.match(cdbParser.RightParen)
                self.state = 786
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 783
                        self.gccDeclaratorExtension() 
                    self.state = 788
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

                pass

            elif la_ == 2:
                self.state = 789
                self.match(cdbParser.LeftBracket)
                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & ((1 << (cdbParser.Const - 35)) | (1 << (cdbParser.Restrict - 35)) | (1 << (cdbParser.Volatile - 35)) | (1 << (cdbParser.Atomic - 35)))) != 0):
                    self.state = 790
                    self.typeQualifierList()


                self.state = 794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__0) | (1 << cdbParser.T__1) | (1 << cdbParser.T__2) | (1 << cdbParser.Sizeof))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (cdbParser.Alignof - 66)) | (1 << (cdbParser.Generic - 66)) | (1 << (cdbParser.LeftParen - 66)) | (1 << (cdbParser.Plus - 66)) | (1 << (cdbParser.PlusPlus - 66)) | (1 << (cdbParser.Minus - 66)) | (1 << (cdbParser.MinusMinus - 66)) | (1 << (cdbParser.Star - 66)) | (1 << (cdbParser.And - 66)) | (1 << (cdbParser.AndAnd - 66)) | (1 << (cdbParser.Not - 66)) | (1 << (cdbParser.Tilde - 66)) | (1 << (cdbParser.Identifier - 66)) | (1 << (cdbParser.Constant - 66)) | (1 << (cdbParser.DigitSequence - 66)) | (1 << (cdbParser.StringLiteral - 66)))) != 0):
                    self.state = 793
                    self.assignmentExpression()


                self.state = 796
                self.match(cdbParser.RightBracket)
                pass

            elif la_ == 3:
                self.state = 797
                self.match(cdbParser.LeftBracket)
                self.state = 798
                self.match(cdbParser.Static)
                self.state = 800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & ((1 << (cdbParser.Const - 35)) | (1 << (cdbParser.Restrict - 35)) | (1 << (cdbParser.Volatile - 35)) | (1 << (cdbParser.Atomic - 35)))) != 0):
                    self.state = 799
                    self.typeQualifierList()


                self.state = 802
                self.assignmentExpression()
                self.state = 803
                self.match(cdbParser.RightBracket)
                pass

            elif la_ == 4:
                self.state = 805
                self.match(cdbParser.LeftBracket)
                self.state = 806
                self.typeQualifierList()
                self.state = 807
                self.match(cdbParser.Static)
                self.state = 808
                self.assignmentExpression()
                self.state = 809
                self.match(cdbParser.RightBracket)
                pass

            elif la_ == 5:
                self.state = 811
                self.match(cdbParser.LeftBracket)
                self.state = 812
                self.match(cdbParser.Star)
                self.state = 813
                self.match(cdbParser.RightBracket)
                pass

            elif la_ == 6:
                self.state = 814
                self.match(cdbParser.LeftParen)
                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__0) | (1 << cdbParser.T__3) | (1 << cdbParser.T__4) | (1 << cdbParser.T__5) | (1 << cdbParser.T__6) | (1 << cdbParser.T__7) | (1 << cdbParser.T__8) | (1 << cdbParser.T__9) | (1 << cdbParser.T__16) | (1 << cdbParser.Auto) | (1 << cdbParser.Char) | (1 << cdbParser.Const) | (1 << cdbParser.Double) | (1 << cdbParser.Enum) | (1 << cdbParser.Extern) | (1 << cdbParser.Float) | (1 << cdbParser.Inline) | (1 << cdbParser.Int) | (1 << cdbParser.Long) | (1 << cdbParser.Register) | (1 << cdbParser.Restrict) | (1 << cdbParser.Short) | (1 << cdbParser.Signed) | (1 << cdbParser.Static) | (1 << cdbParser.Struct) | (1 << cdbParser.Typedef) | (1 << cdbParser.Union) | (1 << cdbParser.Unsigned) | (1 << cdbParser.Void) | (1 << cdbParser.Volatile))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (cdbParser.Alignas - 65)) | (1 << (cdbParser.Atomic - 65)) | (1 << (cdbParser.Bool - 65)) | (1 << (cdbParser.Complex - 65)) | (1 << (cdbParser.Noreturn - 65)) | (1 << (cdbParser.ThreadLocal - 65)) | (1 << (cdbParser.Identifier - 65)))) != 0):
                    self.state = 815
                    self.parameterTypeList()


                self.state = 818
                self.match(cdbParser.RightParen)
                self.state = 822
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 819
                        self.gccDeclaratorExtension() 
                    self.state = 824
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 870
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 868
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                    if la_ == 1:
                        localctx = cdbParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 827
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 828
                        self.match(cdbParser.LeftBracket)
                        self.state = 830
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & ((1 << (cdbParser.Const - 35)) | (1 << (cdbParser.Restrict - 35)) | (1 << (cdbParser.Volatile - 35)) | (1 << (cdbParser.Atomic - 35)))) != 0):
                            self.state = 829
                            self.typeQualifierList()


                        self.state = 833
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__0) | (1 << cdbParser.T__1) | (1 << cdbParser.T__2) | (1 << cdbParser.Sizeof))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (cdbParser.Alignof - 66)) | (1 << (cdbParser.Generic - 66)) | (1 << (cdbParser.LeftParen - 66)) | (1 << (cdbParser.Plus - 66)) | (1 << (cdbParser.PlusPlus - 66)) | (1 << (cdbParser.Minus - 66)) | (1 << (cdbParser.MinusMinus - 66)) | (1 << (cdbParser.Star - 66)) | (1 << (cdbParser.And - 66)) | (1 << (cdbParser.AndAnd - 66)) | (1 << (cdbParser.Not - 66)) | (1 << (cdbParser.Tilde - 66)) | (1 << (cdbParser.Identifier - 66)) | (1 << (cdbParser.Constant - 66)) | (1 << (cdbParser.DigitSequence - 66)) | (1 << (cdbParser.StringLiteral - 66)))) != 0):
                            self.state = 832
                            self.assignmentExpression()


                        self.state = 835
                        self.match(cdbParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = cdbParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 836
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 837
                        self.match(cdbParser.LeftBracket)
                        self.state = 838
                        self.match(cdbParser.Static)
                        self.state = 840
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & ((1 << (cdbParser.Const - 35)) | (1 << (cdbParser.Restrict - 35)) | (1 << (cdbParser.Volatile - 35)) | (1 << (cdbParser.Atomic - 35)))) != 0):
                            self.state = 839
                            self.typeQualifierList()


                        self.state = 842
                        self.assignmentExpression()
                        self.state = 843
                        self.match(cdbParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = cdbParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 845
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 846
                        self.match(cdbParser.LeftBracket)
                        self.state = 847
                        self.typeQualifierList()
                        self.state = 848
                        self.match(cdbParser.Static)
                        self.state = 849
                        self.assignmentExpression()
                        self.state = 850
                        self.match(cdbParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = cdbParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 852
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 853
                        self.match(cdbParser.LeftBracket)
                        self.state = 854
                        self.match(cdbParser.Star)
                        self.state = 855
                        self.match(cdbParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = cdbParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 856
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 857
                        self.match(cdbParser.LeftParen)
                        self.state = 859
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__0) | (1 << cdbParser.T__3) | (1 << cdbParser.T__4) | (1 << cdbParser.T__5) | (1 << cdbParser.T__6) | (1 << cdbParser.T__7) | (1 << cdbParser.T__8) | (1 << cdbParser.T__9) | (1 << cdbParser.T__16) | (1 << cdbParser.Auto) | (1 << cdbParser.Char) | (1 << cdbParser.Const) | (1 << cdbParser.Double) | (1 << cdbParser.Enum) | (1 << cdbParser.Extern) | (1 << cdbParser.Float) | (1 << cdbParser.Inline) | (1 << cdbParser.Int) | (1 << cdbParser.Long) | (1 << cdbParser.Register) | (1 << cdbParser.Restrict) | (1 << cdbParser.Short) | (1 << cdbParser.Signed) | (1 << cdbParser.Static) | (1 << cdbParser.Struct) | (1 << cdbParser.Typedef) | (1 << cdbParser.Union) | (1 << cdbParser.Unsigned) | (1 << cdbParser.Void) | (1 << cdbParser.Volatile))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (cdbParser.Alignas - 65)) | (1 << (cdbParser.Atomic - 65)) | (1 << (cdbParser.Bool - 65)) | (1 << (cdbParser.Complex - 65)) | (1 << (cdbParser.Noreturn - 65)) | (1 << (cdbParser.ThreadLocal - 65)) | (1 << (cdbParser.Identifier - 65)))) != 0):
                            self.state = 858
                            self.parameterTypeList()


                        self.state = 861
                        self.match(cdbParser.RightParen)
                        self.state = 865
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 862
                                self.gccDeclaratorExtension() 
                            self.state = 867
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

                        pass

             
                self.state = 872
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypedefNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(cdbParser.Identifier, 0)

        def getRuleIndex(self):
            return cdbParser.RULE_typedefName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedefName" ):
                listener.enterTypedefName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedefName" ):
                listener.exitTypedefName(self)




    def typedefName(self):

        localctx = cdbParser.TypedefNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_typedefName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.match(cdbParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(cdbParser.AssignmentExpressionContext,0)


        def LeftBrace(self):
            return self.getToken(cdbParser.LeftBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(cdbParser.InitializerListContext,0)


        def RightBrace(self):
            return self.getToken(cdbParser.RightBrace, 0)

        def Comma(self):
            return self.getToken(cdbParser.Comma, 0)

        def getRuleIndex(self):
            return cdbParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)




    def initializer(self):

        localctx = cdbParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_initializer)
        self._la = 0 # Token type
        try:
            self.state = 883
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cdbParser.T__0, cdbParser.T__1, cdbParser.T__2, cdbParser.Sizeof, cdbParser.Alignof, cdbParser.Generic, cdbParser.LeftParen, cdbParser.Plus, cdbParser.PlusPlus, cdbParser.Minus, cdbParser.MinusMinus, cdbParser.Star, cdbParser.And, cdbParser.AndAnd, cdbParser.Not, cdbParser.Tilde, cdbParser.Identifier, cdbParser.Constant, cdbParser.DigitSequence, cdbParser.StringLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 875
                self.assignmentExpression()
                pass
            elif token in [cdbParser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 876
                self.match(cdbParser.LeftBrace)
                self.state = 877
                self.initializerList()
                self.state = 879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cdbParser.Comma:
                    self.state = 878
                    self.match(cdbParser.Comma)


                self.state = 881
                self.match(cdbParser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.InitializerContext)
            else:
                return self.getTypedRuleContext(cdbParser.InitializerContext,i)


        def designation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.DesignationContext)
            else:
                return self.getTypedRuleContext(cdbParser.DesignationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Comma)
            else:
                return self.getToken(cdbParser.Comma, i)

        def getRuleIndex(self):
            return cdbParser.RULE_initializerList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerList" ):
                listener.enterInitializerList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerList" ):
                listener.exitInitializerList(self)




    def initializerList(self):

        localctx = cdbParser.InitializerListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_initializerList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cdbParser.LeftBracket or _la==cdbParser.Dot:
                self.state = 885
                self.designation()


            self.state = 888
            self.initializer()
            self.state = 896
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 889
                    self.match(cdbParser.Comma)
                    self.state = 891
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==cdbParser.LeftBracket or _la==cdbParser.Dot:
                        self.state = 890
                        self.designation()


                    self.state = 893
                    self.initializer() 
                self.state = 898
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designatorList(self):
            return self.getTypedRuleContext(cdbParser.DesignatorListContext,0)


        def Assign(self):
            return self.getToken(cdbParser.Assign, 0)

        def getRuleIndex(self):
            return cdbParser.RULE_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignation" ):
                listener.enterDesignation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignation" ):
                listener.exitDesignation(self)




    def designation(self):

        localctx = cdbParser.DesignationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self.designatorList()
            self.state = 900
            self.match(cdbParser.Assign)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.DesignatorContext)
            else:
                return self.getTypedRuleContext(cdbParser.DesignatorContext,i)


        def getRuleIndex(self):
            return cdbParser.RULE_designatorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignatorList" ):
                listener.enterDesignatorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignatorList" ):
                listener.exitDesignatorList(self)




    def designatorList(self):

        localctx = cdbParser.DesignatorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_designatorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 902
                self.designator()
                self.state = 905 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==cdbParser.LeftBracket or _la==cdbParser.Dot):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(cdbParser.LeftBracket, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(cdbParser.ConstantExpressionContext,0)


        def RightBracket(self):
            return self.getToken(cdbParser.RightBracket, 0)

        def Dot(self):
            return self.getToken(cdbParser.Dot, 0)

        def Identifier(self):
            return self.getToken(cdbParser.Identifier, 0)

        def getRuleIndex(self):
            return cdbParser.RULE_designator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignator" ):
                listener.enterDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignator" ):
                listener.exitDesignator(self)




    def designator(self):

        localctx = cdbParser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_designator)
        try:
            self.state = 913
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cdbParser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 907
                self.match(cdbParser.LeftBracket)
                self.state = 908
                self.constantExpression()
                self.state = 909
                self.match(cdbParser.RightBracket)
                pass
            elif token in [cdbParser.Dot]:
                self.enterOuterAlt(localctx, 2)
                self.state = 911
                self.match(cdbParser.Dot)
                self.state = 912
                self.match(cdbParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticAssertDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StaticAssert(self):
            return self.getToken(cdbParser.StaticAssert, 0)

        def LeftParen(self):
            return self.getToken(cdbParser.LeftParen, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(cdbParser.ConstantExpressionContext,0)


        def Comma(self):
            return self.getToken(cdbParser.Comma, 0)

        def RightParen(self):
            return self.getToken(cdbParser.RightParen, 0)

        def Semi(self):
            return self.getToken(cdbParser.Semi, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.StringLiteral)
            else:
                return self.getToken(cdbParser.StringLiteral, i)

        def getRuleIndex(self):
            return cdbParser.RULE_staticAssertDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticAssertDeclaration" ):
                listener.enterStaticAssertDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticAssertDeclaration" ):
                listener.exitStaticAssertDeclaration(self)




    def staticAssertDeclaration(self):

        localctx = cdbParser.StaticAssertDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_staticAssertDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self.match(cdbParser.StaticAssert)
            self.state = 916
            self.match(cdbParser.LeftParen)
            self.state = 917
            self.constantExpression()
            self.state = 918
            self.match(cdbParser.Comma)
            self.state = 920 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 919
                self.match(cdbParser.StringLiteral)
                self.state = 922 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==cdbParser.StringLiteral):
                    break

            self.state = 924
            self.match(cdbParser.RightParen)
            self.state = 925
            self.match(cdbParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlSelectStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldList(self):
            return self.getTypedRuleContext(cdbParser.FieldListContext,0)


        def spaceSeparatedList(self):
            return self.getTypedRuleContext(cdbParser.SpaceSeparatedListContext,0)


        def Identifier(self):
            return self.getToken(cdbParser.Identifier, 0)

        def Semi(self):
            return self.getToken(cdbParser.Semi, 0)

        def getRuleIndex(self):
            return cdbParser.RULE_sqlSelectStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlSelectStatement" ):
                listener.enterSqlSelectStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlSelectStatement" ):
                listener.exitSqlSelectStatement(self)




    def sqlSelectStatement(self):

        localctx = cdbParser.SqlSelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_sqlSelectStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 927
            self.match(cdbParser.T__17)
            self.state = 928
            self.fieldList()
            self.state = 929
            self.match(cdbParser.T__18)
            self.state = 930
            self.spaceSeparatedList()
            self.state = 931
            self.match(cdbParser.T__19)
            self.state = 932
            self.match(cdbParser.Identifier)
            self.state = 933
            self.match(cdbParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlInsertStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(cdbParser.Identifier, 0)

        def commaSeparatedList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.CommaSeparatedListContext)
            else:
                return self.getTypedRuleContext(cdbParser.CommaSeparatedListContext,i)


        def getRuleIndex(self):
            return cdbParser.RULE_sqlInsertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlInsertStatement" ):
                listener.enterSqlInsertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlInsertStatement" ):
                listener.exitSqlInsertStatement(self)




    def sqlInsertStatement(self):

        localctx = cdbParser.SqlInsertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_sqlInsertStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            self.match(cdbParser.T__20)
            self.state = 936
            self.match(cdbParser.Identifier)
            self.state = 937
            self.match(cdbParser.T__21)
            self.state = 938
            self.commaSeparatedList()
            self.state = 939
            self.match(cdbParser.T__22)
            self.state = 940
            self.commaSeparatedList()
            self.state = 941
            self.match(cdbParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlUpdateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(cdbParser.Identifier, 0)

        def commaSeparatedList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.CommaSeparatedListContext)
            else:
                return self.getTypedRuleContext(cdbParser.CommaSeparatedListContext,i)


        def Semi(self):
            return self.getToken(cdbParser.Semi, 0)

        def getRuleIndex(self):
            return cdbParser.RULE_sqlUpdateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlUpdateStatement" ):
                listener.enterSqlUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlUpdateStatement" ):
                listener.exitSqlUpdateStatement(self)




    def sqlUpdateStatement(self):

        localctx = cdbParser.SqlUpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_sqlUpdateStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self.match(cdbParser.T__24)
            self.state = 944
            self.match(cdbParser.Identifier)
            self.state = 945
            self.match(cdbParser.T__25)
            self.state = 946
            self.commaSeparatedList()
            self.state = 947
            self.match(cdbParser.T__26)
            self.state = 948
            self.commaSeparatedList()
            self.state = 949
            self.match(cdbParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlDeleteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(cdbParser.Identifier, 0)

        def commaSeparatedList(self):
            return self.getTypedRuleContext(cdbParser.CommaSeparatedListContext,0)


        def Semi(self):
            return self.getToken(cdbParser.Semi, 0)

        def getRuleIndex(self):
            return cdbParser.RULE_sqlDeleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlDeleteStatement" ):
                listener.enterSqlDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlDeleteStatement" ):
                listener.exitSqlDeleteStatement(self)




    def sqlDeleteStatement(self):

        localctx = cdbParser.SqlDeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_sqlDeleteStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.match(cdbParser.T__27)
            self.state = 952
            self.match(cdbParser.Identifier)
            self.state = 953
            self.match(cdbParser.T__26)
            self.state = 954
            self.commaSeparatedList()
            self.state = 955
            self.match(cdbParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Identifier)
            else:
                return self.getToken(cdbParser.Identifier, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Comma)
            else:
                return self.getToken(cdbParser.Comma, i)

        def getRuleIndex(self):
            return cdbParser.RULE_fieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldList" ):
                listener.enterFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldList" ):
                listener.exitFieldList(self)




    def fieldList(self):

        localctx = cdbParser.FieldListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_fieldList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            self.match(cdbParser.Identifier)
            self.state = 962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cdbParser.Comma:
                self.state = 958
                self.match(cdbParser.Comma)
                self.state = 959
                self.match(cdbParser.Identifier)
                self.state = 964
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommaSeparatedListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cdbParser.ExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Comma)
            else:
                return self.getToken(cdbParser.Comma, i)

        def getRuleIndex(self):
            return cdbParser.RULE_commaSeparatedList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommaSeparatedList" ):
                listener.enterCommaSeparatedList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommaSeparatedList" ):
                listener.exitCommaSeparatedList(self)




    def commaSeparatedList(self):

        localctx = cdbParser.CommaSeparatedListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_commaSeparatedList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self.expression()
            self.state = 970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cdbParser.Comma:
                self.state = 966
                self.match(cdbParser.Comma)
                self.state = 967
                self.expression()
                self.state = 972
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpaceSeparatedListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Identifier)
            else:
                return self.getToken(cdbParser.Identifier, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Comma)
            else:
                return self.getToken(cdbParser.Comma, i)

        def getRuleIndex(self):
            return cdbParser.RULE_spaceSeparatedList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpaceSeparatedList" ):
                listener.enterSpaceSeparatedList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpaceSeparatedList" ):
                listener.exitSpaceSeparatedList(self)




    def spaceSeparatedList(self):

        localctx = cdbParser.SpaceSeparatedListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_spaceSeparatedList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            self.match(cdbParser.Identifier)
            self.state = 978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cdbParser.Comma:
                self.state = 974
                self.match(cdbParser.Comma)
                self.state = 975
                self.match(cdbParser.Identifier)
                self.state = 980
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledStatement(self):
            return self.getTypedRuleContext(cdbParser.LabeledStatementContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(cdbParser.CompoundStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(cdbParser.ExpressionStatementContext,0)


        def selectionStatement(self):
            return self.getTypedRuleContext(cdbParser.SelectionStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(cdbParser.IterationStatementContext,0)


        def jumpStatement(self):
            return self.getTypedRuleContext(cdbParser.JumpStatementContext,0)


        def sqlSelectStatement(self):
            return self.getTypedRuleContext(cdbParser.SqlSelectStatementContext,0)


        def sqlInsertStatement(self):
            return self.getTypedRuleContext(cdbParser.SqlInsertStatementContext,0)


        def sqlUpdateStatement(self):
            return self.getTypedRuleContext(cdbParser.SqlUpdateStatementContext,0)


        def sqlDeleteStatement(self):
            return self.getTypedRuleContext(cdbParser.SqlDeleteStatementContext,0)


        def LeftParen(self):
            return self.getToken(cdbParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(cdbParser.RightParen, 0)

        def Semi(self):
            return self.getToken(cdbParser.Semi, 0)

        def Volatile(self):
            return self.getToken(cdbParser.Volatile, 0)

        def logicalOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.LogicalOrExpressionContext)
            else:
                return self.getTypedRuleContext(cdbParser.LogicalOrExpressionContext,i)


        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Colon)
            else:
                return self.getToken(cdbParser.Colon, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Comma)
            else:
                return self.getToken(cdbParser.Comma, i)

        def getRuleIndex(self):
            return cdbParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = cdbParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1022
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 981
                self.labeledStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 982
                self.compoundStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 983
                self.expressionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 984
                self.selectionStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 985
                self.iterationStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 986
                self.jumpStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 987
                self.sqlSelectStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 988
                self.sqlInsertStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 989
                self.sqlUpdateStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 990
                self.sqlDeleteStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 991
                _la = self._input.LA(1)
                if not(_la==cdbParser.T__15 or _la==cdbParser.T__28):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 992
                _la = self._input.LA(1)
                if not(_la==cdbParser.T__29 or _la==cdbParser.Volatile):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 993
                self.match(cdbParser.LeftParen)
                self.state = 1002
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__0) | (1 << cdbParser.T__1) | (1 << cdbParser.T__2) | (1 << cdbParser.Sizeof))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (cdbParser.Alignof - 66)) | (1 << (cdbParser.Generic - 66)) | (1 << (cdbParser.LeftParen - 66)) | (1 << (cdbParser.Plus - 66)) | (1 << (cdbParser.PlusPlus - 66)) | (1 << (cdbParser.Minus - 66)) | (1 << (cdbParser.MinusMinus - 66)) | (1 << (cdbParser.Star - 66)) | (1 << (cdbParser.And - 66)) | (1 << (cdbParser.AndAnd - 66)) | (1 << (cdbParser.Not - 66)) | (1 << (cdbParser.Tilde - 66)) | (1 << (cdbParser.Identifier - 66)) | (1 << (cdbParser.Constant - 66)) | (1 << (cdbParser.DigitSequence - 66)) | (1 << (cdbParser.StringLiteral - 66)))) != 0):
                    self.state = 994
                    self.logicalOrExpression()
                    self.state = 999
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==cdbParser.Comma:
                        self.state = 995
                        self.match(cdbParser.Comma)
                        self.state = 996
                        self.logicalOrExpression()
                        self.state = 1001
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1017
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==cdbParser.Colon:
                    self.state = 1004
                    self.match(cdbParser.Colon)
                    self.state = 1013
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__0) | (1 << cdbParser.T__1) | (1 << cdbParser.T__2) | (1 << cdbParser.Sizeof))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (cdbParser.Alignof - 66)) | (1 << (cdbParser.Generic - 66)) | (1 << (cdbParser.LeftParen - 66)) | (1 << (cdbParser.Plus - 66)) | (1 << (cdbParser.PlusPlus - 66)) | (1 << (cdbParser.Minus - 66)) | (1 << (cdbParser.MinusMinus - 66)) | (1 << (cdbParser.Star - 66)) | (1 << (cdbParser.And - 66)) | (1 << (cdbParser.AndAnd - 66)) | (1 << (cdbParser.Not - 66)) | (1 << (cdbParser.Tilde - 66)) | (1 << (cdbParser.Identifier - 66)) | (1 << (cdbParser.Constant - 66)) | (1 << (cdbParser.DigitSequence - 66)) | (1 << (cdbParser.StringLiteral - 66)))) != 0):
                        self.state = 1005
                        self.logicalOrExpression()
                        self.state = 1010
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==cdbParser.Comma:
                            self.state = 1006
                            self.match(cdbParser.Comma)
                            self.state = 1007
                            self.logicalOrExpression()
                            self.state = 1012
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 1019
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1020
                self.match(cdbParser.RightParen)
                self.state = 1021
                self.match(cdbParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(cdbParser.Identifier, 0)

        def Colon(self):
            return self.getToken(cdbParser.Colon, 0)

        def statement(self):
            return self.getTypedRuleContext(cdbParser.StatementContext,0)


        def Case(self):
            return self.getToken(cdbParser.Case, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(cdbParser.ConstantExpressionContext,0)


        def Default(self):
            return self.getToken(cdbParser.Default, 0)

        def getRuleIndex(self):
            return cdbParser.RULE_labeledStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStatement" ):
                listener.enterLabeledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStatement" ):
                listener.exitLabeledStatement(self)




    def labeledStatement(self):

        localctx = cdbParser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_labeledStatement)
        try:
            self.state = 1035
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cdbParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1024
                self.match(cdbParser.Identifier)
                self.state = 1025
                self.match(cdbParser.Colon)
                self.state = 1026
                self.statement()
                pass
            elif token in [cdbParser.Case]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1027
                self.match(cdbParser.Case)
                self.state = 1028
                self.constantExpression()
                self.state = 1029
                self.match(cdbParser.Colon)
                self.state = 1030
                self.statement()
                pass
            elif token in [cdbParser.Default]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1032
                self.match(cdbParser.Default)
                self.state = 1033
                self.match(cdbParser.Colon)
                self.state = 1034
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(cdbParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(cdbParser.RightBrace, 0)

        def blockItemList(self):
            return self.getTypedRuleContext(cdbParser.BlockItemListContext,0)


        def getRuleIndex(self):
            return cdbParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)




    def compoundStatement(self):

        localctx = cdbParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_compoundStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            self.match(cdbParser.LeftBrace)
            self.state = 1039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__0) | (1 << cdbParser.T__1) | (1 << cdbParser.T__2) | (1 << cdbParser.T__3) | (1 << cdbParser.T__4) | (1 << cdbParser.T__5) | (1 << cdbParser.T__6) | (1 << cdbParser.T__7) | (1 << cdbParser.T__8) | (1 << cdbParser.T__9) | (1 << cdbParser.T__15) | (1 << cdbParser.T__16) | (1 << cdbParser.T__17) | (1 << cdbParser.T__20) | (1 << cdbParser.T__24) | (1 << cdbParser.T__27) | (1 << cdbParser.T__28) | (1 << cdbParser.Auto) | (1 << cdbParser.Break) | (1 << cdbParser.Case) | (1 << cdbParser.Char) | (1 << cdbParser.Const) | (1 << cdbParser.Continue) | (1 << cdbParser.Default) | (1 << cdbParser.Do) | (1 << cdbParser.Double) | (1 << cdbParser.Enum) | (1 << cdbParser.Extern) | (1 << cdbParser.Float) | (1 << cdbParser.For) | (1 << cdbParser.Goto) | (1 << cdbParser.If) | (1 << cdbParser.Inline) | (1 << cdbParser.Int) | (1 << cdbParser.Long) | (1 << cdbParser.Register) | (1 << cdbParser.Restrict) | (1 << cdbParser.Return) | (1 << cdbParser.Short) | (1 << cdbParser.Signed) | (1 << cdbParser.Sizeof) | (1 << cdbParser.Static) | (1 << cdbParser.Struct) | (1 << cdbParser.Switch) | (1 << cdbParser.Typedef) | (1 << cdbParser.Union) | (1 << cdbParser.Unsigned) | (1 << cdbParser.Void) | (1 << cdbParser.Volatile))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (cdbParser.While - 64)) | (1 << (cdbParser.Alignas - 64)) | (1 << (cdbParser.Alignof - 64)) | (1 << (cdbParser.Atomic - 64)) | (1 << (cdbParser.Bool - 64)) | (1 << (cdbParser.Complex - 64)) | (1 << (cdbParser.Generic - 64)) | (1 << (cdbParser.Noreturn - 64)) | (1 << (cdbParser.StaticAssert - 64)) | (1 << (cdbParser.ThreadLocal - 64)) | (1 << (cdbParser.LeftParen - 64)) | (1 << (cdbParser.LeftBrace - 64)) | (1 << (cdbParser.Plus - 64)) | (1 << (cdbParser.PlusPlus - 64)) | (1 << (cdbParser.Minus - 64)) | (1 << (cdbParser.MinusMinus - 64)) | (1 << (cdbParser.Star - 64)) | (1 << (cdbParser.And - 64)) | (1 << (cdbParser.AndAnd - 64)) | (1 << (cdbParser.Not - 64)) | (1 << (cdbParser.Tilde - 64)) | (1 << (cdbParser.Semi - 64)) | (1 << (cdbParser.Identifier - 64)) | (1 << (cdbParser.Constant - 64)) | (1 << (cdbParser.DigitSequence - 64)) | (1 << (cdbParser.StringLiteral - 64)))) != 0):
                self.state = 1038
                self.blockItemList()


            self.state = 1041
            self.match(cdbParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.BlockItemContext)
            else:
                return self.getTypedRuleContext(cdbParser.BlockItemContext,i)


        def getRuleIndex(self):
            return cdbParser.RULE_blockItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItemList" ):
                listener.enterBlockItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItemList" ):
                listener.exitBlockItemList(self)




    def blockItemList(self):

        localctx = cdbParser.BlockItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_blockItemList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1043
                self.blockItem()
                self.state = 1046 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__0) | (1 << cdbParser.T__1) | (1 << cdbParser.T__2) | (1 << cdbParser.T__3) | (1 << cdbParser.T__4) | (1 << cdbParser.T__5) | (1 << cdbParser.T__6) | (1 << cdbParser.T__7) | (1 << cdbParser.T__8) | (1 << cdbParser.T__9) | (1 << cdbParser.T__15) | (1 << cdbParser.T__16) | (1 << cdbParser.T__17) | (1 << cdbParser.T__20) | (1 << cdbParser.T__24) | (1 << cdbParser.T__27) | (1 << cdbParser.T__28) | (1 << cdbParser.Auto) | (1 << cdbParser.Break) | (1 << cdbParser.Case) | (1 << cdbParser.Char) | (1 << cdbParser.Const) | (1 << cdbParser.Continue) | (1 << cdbParser.Default) | (1 << cdbParser.Do) | (1 << cdbParser.Double) | (1 << cdbParser.Enum) | (1 << cdbParser.Extern) | (1 << cdbParser.Float) | (1 << cdbParser.For) | (1 << cdbParser.Goto) | (1 << cdbParser.If) | (1 << cdbParser.Inline) | (1 << cdbParser.Int) | (1 << cdbParser.Long) | (1 << cdbParser.Register) | (1 << cdbParser.Restrict) | (1 << cdbParser.Return) | (1 << cdbParser.Short) | (1 << cdbParser.Signed) | (1 << cdbParser.Sizeof) | (1 << cdbParser.Static) | (1 << cdbParser.Struct) | (1 << cdbParser.Switch) | (1 << cdbParser.Typedef) | (1 << cdbParser.Union) | (1 << cdbParser.Unsigned) | (1 << cdbParser.Void) | (1 << cdbParser.Volatile))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (cdbParser.While - 64)) | (1 << (cdbParser.Alignas - 64)) | (1 << (cdbParser.Alignof - 64)) | (1 << (cdbParser.Atomic - 64)) | (1 << (cdbParser.Bool - 64)) | (1 << (cdbParser.Complex - 64)) | (1 << (cdbParser.Generic - 64)) | (1 << (cdbParser.Noreturn - 64)) | (1 << (cdbParser.StaticAssert - 64)) | (1 << (cdbParser.ThreadLocal - 64)) | (1 << (cdbParser.LeftParen - 64)) | (1 << (cdbParser.LeftBrace - 64)) | (1 << (cdbParser.Plus - 64)) | (1 << (cdbParser.PlusPlus - 64)) | (1 << (cdbParser.Minus - 64)) | (1 << (cdbParser.MinusMinus - 64)) | (1 << (cdbParser.Star - 64)) | (1 << (cdbParser.And - 64)) | (1 << (cdbParser.AndAnd - 64)) | (1 << (cdbParser.Not - 64)) | (1 << (cdbParser.Tilde - 64)) | (1 << (cdbParser.Semi - 64)) | (1 << (cdbParser.Identifier - 64)) | (1 << (cdbParser.Constant - 64)) | (1 << (cdbParser.DigitSequence - 64)) | (1 << (cdbParser.StringLiteral - 64)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(cdbParser.StatementContext,0)


        def declaration(self):
            return self.getTypedRuleContext(cdbParser.DeclarationContext,0)


        def getRuleIndex(self):
            return cdbParser.RULE_blockItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItem" ):
                listener.enterBlockItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItem" ):
                listener.exitBlockItem(self)




    def blockItem(self):

        localctx = cdbParser.BlockItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_blockItem)
        try:
            self.state = 1050
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1048
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1049
                self.declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(cdbParser.Semi, 0)

        def expression(self):
            return self.getTypedRuleContext(cdbParser.ExpressionContext,0)


        def getRuleIndex(self):
            return cdbParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = cdbParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_expressionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__0) | (1 << cdbParser.T__1) | (1 << cdbParser.T__2) | (1 << cdbParser.Sizeof))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (cdbParser.Alignof - 66)) | (1 << (cdbParser.Generic - 66)) | (1 << (cdbParser.LeftParen - 66)) | (1 << (cdbParser.Plus - 66)) | (1 << (cdbParser.PlusPlus - 66)) | (1 << (cdbParser.Minus - 66)) | (1 << (cdbParser.MinusMinus - 66)) | (1 << (cdbParser.Star - 66)) | (1 << (cdbParser.And - 66)) | (1 << (cdbParser.AndAnd - 66)) | (1 << (cdbParser.Not - 66)) | (1 << (cdbParser.Tilde - 66)) | (1 << (cdbParser.Identifier - 66)) | (1 << (cdbParser.Constant - 66)) | (1 << (cdbParser.DigitSequence - 66)) | (1 << (cdbParser.StringLiteral - 66)))) != 0):
                self.state = 1052
                self.expression()


            self.state = 1055
            self.match(cdbParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(cdbParser.If, 0)

        def LeftParen(self):
            return self.getToken(cdbParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(cdbParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(cdbParser.RightParen, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.StatementContext)
            else:
                return self.getTypedRuleContext(cdbParser.StatementContext,i)


        def Else(self):
            return self.getToken(cdbParser.Else, 0)

        def Switch(self):
            return self.getToken(cdbParser.Switch, 0)

        def getRuleIndex(self):
            return cdbParser.RULE_selectionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionStatement" ):
                listener.enterSelectionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionStatement" ):
                listener.exitSelectionStatement(self)




    def selectionStatement(self):

        localctx = cdbParser.SelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_selectionStatement)
        try:
            self.state = 1072
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cdbParser.If]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1057
                self.match(cdbParser.If)
                self.state = 1058
                self.match(cdbParser.LeftParen)
                self.state = 1059
                self.expression()
                self.state = 1060
                self.match(cdbParser.RightParen)
                self.state = 1061
                self.statement()
                self.state = 1064
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                if la_ == 1:
                    self.state = 1062
                    self.match(cdbParser.Else)
                    self.state = 1063
                    self.statement()


                pass
            elif token in [cdbParser.Switch]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1066
                self.match(cdbParser.Switch)
                self.state = 1067
                self.match(cdbParser.LeftParen)
                self.state = 1068
                self.expression()
                self.state = 1069
                self.match(cdbParser.RightParen)
                self.state = 1070
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(cdbParser.While, 0)

        def LeftParen(self):
            return self.getToken(cdbParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(cdbParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(cdbParser.RightParen, 0)

        def statement(self):
            return self.getTypedRuleContext(cdbParser.StatementContext,0)


        def Do(self):
            return self.getToken(cdbParser.Do, 0)

        def Semi(self):
            return self.getToken(cdbParser.Semi, 0)

        def For(self):
            return self.getToken(cdbParser.For, 0)

        def forCondition(self):
            return self.getTypedRuleContext(cdbParser.ForConditionContext,0)


        def getRuleIndex(self):
            return cdbParser.RULE_iterationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationStatement" ):
                listener.enterIterationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationStatement" ):
                listener.exitIterationStatement(self)




    def iterationStatement(self):

        localctx = cdbParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_iterationStatement)
        try:
            self.state = 1094
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cdbParser.While]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1074
                self.match(cdbParser.While)
                self.state = 1075
                self.match(cdbParser.LeftParen)
                self.state = 1076
                self.expression()
                self.state = 1077
                self.match(cdbParser.RightParen)
                self.state = 1078
                self.statement()
                pass
            elif token in [cdbParser.Do]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1080
                self.match(cdbParser.Do)
                self.state = 1081
                self.statement()
                self.state = 1082
                self.match(cdbParser.While)
                self.state = 1083
                self.match(cdbParser.LeftParen)
                self.state = 1084
                self.expression()
                self.state = 1085
                self.match(cdbParser.RightParen)
                self.state = 1086
                self.match(cdbParser.Semi)
                pass
            elif token in [cdbParser.For]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1088
                self.match(cdbParser.For)
                self.state = 1089
                self.match(cdbParser.LeftParen)
                self.state = 1090
                self.forCondition()
                self.state = 1091
                self.match(cdbParser.RightParen)
                self.state = 1092
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Semi)
            else:
                return self.getToken(cdbParser.Semi, i)

        def forDeclaration(self):
            return self.getTypedRuleContext(cdbParser.ForDeclarationContext,0)


        def forExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.ForExpressionContext)
            else:
                return self.getTypedRuleContext(cdbParser.ForExpressionContext,i)


        def expression(self):
            return self.getTypedRuleContext(cdbParser.ExpressionContext,0)


        def getRuleIndex(self):
            return cdbParser.RULE_forCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForCondition" ):
                listener.enterForCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForCondition" ):
                listener.exitForCondition(self)




    def forCondition(self):

        localctx = cdbParser.ForConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_forCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 1096
                self.forDeclaration()
                pass

            elif la_ == 2:
                self.state = 1098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__0) | (1 << cdbParser.T__1) | (1 << cdbParser.T__2) | (1 << cdbParser.Sizeof))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (cdbParser.Alignof - 66)) | (1 << (cdbParser.Generic - 66)) | (1 << (cdbParser.LeftParen - 66)) | (1 << (cdbParser.Plus - 66)) | (1 << (cdbParser.PlusPlus - 66)) | (1 << (cdbParser.Minus - 66)) | (1 << (cdbParser.MinusMinus - 66)) | (1 << (cdbParser.Star - 66)) | (1 << (cdbParser.And - 66)) | (1 << (cdbParser.AndAnd - 66)) | (1 << (cdbParser.Not - 66)) | (1 << (cdbParser.Tilde - 66)) | (1 << (cdbParser.Identifier - 66)) | (1 << (cdbParser.Constant - 66)) | (1 << (cdbParser.DigitSequence - 66)) | (1 << (cdbParser.StringLiteral - 66)))) != 0):
                    self.state = 1097
                    self.expression()


                pass


            self.state = 1102
            self.match(cdbParser.Semi)
            self.state = 1104
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__0) | (1 << cdbParser.T__1) | (1 << cdbParser.T__2) | (1 << cdbParser.Sizeof))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (cdbParser.Alignof - 66)) | (1 << (cdbParser.Generic - 66)) | (1 << (cdbParser.LeftParen - 66)) | (1 << (cdbParser.Plus - 66)) | (1 << (cdbParser.PlusPlus - 66)) | (1 << (cdbParser.Minus - 66)) | (1 << (cdbParser.MinusMinus - 66)) | (1 << (cdbParser.Star - 66)) | (1 << (cdbParser.And - 66)) | (1 << (cdbParser.AndAnd - 66)) | (1 << (cdbParser.Not - 66)) | (1 << (cdbParser.Tilde - 66)) | (1 << (cdbParser.Identifier - 66)) | (1 << (cdbParser.Constant - 66)) | (1 << (cdbParser.DigitSequence - 66)) | (1 << (cdbParser.StringLiteral - 66)))) != 0):
                self.state = 1103
                self.forExpression()


            self.state = 1106
            self.match(cdbParser.Semi)
            self.state = 1108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__0) | (1 << cdbParser.T__1) | (1 << cdbParser.T__2) | (1 << cdbParser.Sizeof))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (cdbParser.Alignof - 66)) | (1 << (cdbParser.Generic - 66)) | (1 << (cdbParser.LeftParen - 66)) | (1 << (cdbParser.Plus - 66)) | (1 << (cdbParser.PlusPlus - 66)) | (1 << (cdbParser.Minus - 66)) | (1 << (cdbParser.MinusMinus - 66)) | (1 << (cdbParser.Star - 66)) | (1 << (cdbParser.And - 66)) | (1 << (cdbParser.AndAnd - 66)) | (1 << (cdbParser.Not - 66)) | (1 << (cdbParser.Tilde - 66)) | (1 << (cdbParser.Identifier - 66)) | (1 << (cdbParser.Constant - 66)) | (1 << (cdbParser.DigitSequence - 66)) | (1 << (cdbParser.StringLiteral - 66)))) != 0):
                self.state = 1107
                self.forExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(cdbParser.DeclarationSpecifiersContext,0)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(cdbParser.InitDeclaratorListContext,0)


        def getRuleIndex(self):
            return cdbParser.RULE_forDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForDeclaration" ):
                listener.enterForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForDeclaration" ):
                listener.exitForDeclaration(self)




    def forDeclaration(self):

        localctx = cdbParser.ForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_forDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1110
            self.declarationSpecifiers()
            self.state = 1112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__8) | (1 << cdbParser.T__10) | (1 << cdbParser.T__11) | (1 << cdbParser.T__12) | (1 << cdbParser.T__13) | (1 << cdbParser.T__14))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (cdbParser.LeftParen - 75)) | (1 << (cdbParser.Star - 75)) | (1 << (cdbParser.Caret - 75)) | (1 << (cdbParser.Identifier - 75)))) != 0):
                self.state = 1111
                self.initDeclaratorList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(cdbParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(cdbParser.Comma)
            else:
                return self.getToken(cdbParser.Comma, i)

        def getRuleIndex(self):
            return cdbParser.RULE_forExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpression" ):
                listener.enterForExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpression" ):
                listener.exitForExpression(self)




    def forExpression(self):

        localctx = cdbParser.ForExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_forExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1114
            self.assignmentExpression()
            self.state = 1119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cdbParser.Comma:
                self.state = 1115
                self.match(cdbParser.Comma)
                self.state = 1116
                self.assignmentExpression()
                self.state = 1121
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(cdbParser.Semi, 0)

        def Goto(self):
            return self.getToken(cdbParser.Goto, 0)

        def Identifier(self):
            return self.getToken(cdbParser.Identifier, 0)

        def Return(self):
            return self.getToken(cdbParser.Return, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(cdbParser.UnaryExpressionContext,0)


        def Continue(self):
            return self.getToken(cdbParser.Continue, 0)

        def Break(self):
            return self.getToken(cdbParser.Break, 0)

        def expression(self):
            return self.getTypedRuleContext(cdbParser.ExpressionContext,0)


        def getRuleIndex(self):
            return cdbParser.RULE_jumpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpStatement" ):
                listener.enterJumpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpStatement" ):
                listener.exitJumpStatement(self)




    def jumpStatement(self):

        localctx = cdbParser.JumpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_jumpStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.state = 1122
                self.match(cdbParser.Goto)
                self.state = 1123
                self.match(cdbParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 1124
                _la = self._input.LA(1)
                if not(_la==cdbParser.Break or _la==cdbParser.Continue):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.state = 1125
                self.match(cdbParser.Return)
                self.state = 1127
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__0) | (1 << cdbParser.T__1) | (1 << cdbParser.T__2) | (1 << cdbParser.Sizeof))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (cdbParser.Alignof - 66)) | (1 << (cdbParser.Generic - 66)) | (1 << (cdbParser.LeftParen - 66)) | (1 << (cdbParser.Plus - 66)) | (1 << (cdbParser.PlusPlus - 66)) | (1 << (cdbParser.Minus - 66)) | (1 << (cdbParser.MinusMinus - 66)) | (1 << (cdbParser.Star - 66)) | (1 << (cdbParser.And - 66)) | (1 << (cdbParser.AndAnd - 66)) | (1 << (cdbParser.Not - 66)) | (1 << (cdbParser.Tilde - 66)) | (1 << (cdbParser.Identifier - 66)) | (1 << (cdbParser.Constant - 66)) | (1 << (cdbParser.DigitSequence - 66)) | (1 << (cdbParser.StringLiteral - 66)))) != 0):
                    self.state = 1126
                    self.expression()


                pass

            elif la_ == 4:
                self.state = 1129
                self.match(cdbParser.Goto)
                self.state = 1130
                self.unaryExpression()
                pass


            self.state = 1133
            self.match(cdbParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompilationUnitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(cdbParser.EOF, 0)

        def translationUnit(self):
            return self.getTypedRuleContext(cdbParser.TranslationUnitContext,0)


        def getRuleIndex(self):
            return cdbParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)




    def compilationUnit(self):

        localctx = cdbParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__0) | (1 << cdbParser.T__3) | (1 << cdbParser.T__4) | (1 << cdbParser.T__5) | (1 << cdbParser.T__6) | (1 << cdbParser.T__7) | (1 << cdbParser.T__8) | (1 << cdbParser.T__9) | (1 << cdbParser.T__10) | (1 << cdbParser.T__11) | (1 << cdbParser.T__12) | (1 << cdbParser.T__13) | (1 << cdbParser.T__14) | (1 << cdbParser.T__16) | (1 << cdbParser.Auto) | (1 << cdbParser.Char) | (1 << cdbParser.Const) | (1 << cdbParser.Double) | (1 << cdbParser.Enum) | (1 << cdbParser.Extern) | (1 << cdbParser.Float) | (1 << cdbParser.Inline) | (1 << cdbParser.Int) | (1 << cdbParser.Long) | (1 << cdbParser.Register) | (1 << cdbParser.Restrict) | (1 << cdbParser.Short) | (1 << cdbParser.Signed) | (1 << cdbParser.Static) | (1 << cdbParser.Struct) | (1 << cdbParser.Typedef) | (1 << cdbParser.Union) | (1 << cdbParser.Unsigned) | (1 << cdbParser.Void) | (1 << cdbParser.Volatile))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (cdbParser.Alignas - 65)) | (1 << (cdbParser.Atomic - 65)) | (1 << (cdbParser.Bool - 65)) | (1 << (cdbParser.Complex - 65)) | (1 << (cdbParser.Noreturn - 65)) | (1 << (cdbParser.StaticAssert - 65)) | (1 << (cdbParser.ThreadLocal - 65)) | (1 << (cdbParser.LeftParen - 65)) | (1 << (cdbParser.Star - 65)) | (1 << (cdbParser.Caret - 65)) | (1 << (cdbParser.Semi - 65)) | (1 << (cdbParser.Identifier - 65)))) != 0):
                self.state = 1135
                self.translationUnit()


            self.state = 1138
            self.match(cdbParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TranslationUnitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externalDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.ExternalDeclarationContext)
            else:
                return self.getTypedRuleContext(cdbParser.ExternalDeclarationContext,i)


        def getRuleIndex(self):
            return cdbParser.RULE_translationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslationUnit" ):
                listener.enterTranslationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslationUnit" ):
                listener.exitTranslationUnit(self)




    def translationUnit(self):

        localctx = cdbParser.TranslationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_translationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1140
                self.externalDeclaration()
                self.state = 1143 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__0) | (1 << cdbParser.T__3) | (1 << cdbParser.T__4) | (1 << cdbParser.T__5) | (1 << cdbParser.T__6) | (1 << cdbParser.T__7) | (1 << cdbParser.T__8) | (1 << cdbParser.T__9) | (1 << cdbParser.T__10) | (1 << cdbParser.T__11) | (1 << cdbParser.T__12) | (1 << cdbParser.T__13) | (1 << cdbParser.T__14) | (1 << cdbParser.T__16) | (1 << cdbParser.Auto) | (1 << cdbParser.Char) | (1 << cdbParser.Const) | (1 << cdbParser.Double) | (1 << cdbParser.Enum) | (1 << cdbParser.Extern) | (1 << cdbParser.Float) | (1 << cdbParser.Inline) | (1 << cdbParser.Int) | (1 << cdbParser.Long) | (1 << cdbParser.Register) | (1 << cdbParser.Restrict) | (1 << cdbParser.Short) | (1 << cdbParser.Signed) | (1 << cdbParser.Static) | (1 << cdbParser.Struct) | (1 << cdbParser.Typedef) | (1 << cdbParser.Union) | (1 << cdbParser.Unsigned) | (1 << cdbParser.Void) | (1 << cdbParser.Volatile))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (cdbParser.Alignas - 65)) | (1 << (cdbParser.Atomic - 65)) | (1 << (cdbParser.Bool - 65)) | (1 << (cdbParser.Complex - 65)) | (1 << (cdbParser.Noreturn - 65)) | (1 << (cdbParser.StaticAssert - 65)) | (1 << (cdbParser.ThreadLocal - 65)) | (1 << (cdbParser.LeftParen - 65)) | (1 << (cdbParser.Star - 65)) | (1 << (cdbParser.Caret - 65)) | (1 << (cdbParser.Semi - 65)) | (1 << (cdbParser.Identifier - 65)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDefinition(self):
            return self.getTypedRuleContext(cdbParser.FunctionDefinitionContext,0)


        def declaration(self):
            return self.getTypedRuleContext(cdbParser.DeclarationContext,0)


        def Semi(self):
            return self.getToken(cdbParser.Semi, 0)

        def getRuleIndex(self):
            return cdbParser.RULE_externalDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalDeclaration" ):
                listener.enterExternalDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalDeclaration" ):
                listener.exitExternalDeclaration(self)




    def externalDeclaration(self):

        localctx = cdbParser.ExternalDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_externalDeclaration)
        try:
            self.state = 1148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1145
                self.functionDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1146
                self.declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1147
                self.match(cdbParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(cdbParser.DeclaratorContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(cdbParser.CompoundStatementContext,0)


        def declarationSpecifiers(self):
            return self.getTypedRuleContext(cdbParser.DeclarationSpecifiersContext,0)


        def declarationList(self):
            return self.getTypedRuleContext(cdbParser.DeclarationListContext,0)


        def getRuleIndex(self):
            return cdbParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)




    def functionDefinition(self):

        localctx = cdbParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1151
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.state = 1150
                self.declarationSpecifiers()


            self.state = 1153
            self.declarator()
            self.state = 1155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__0) | (1 << cdbParser.T__3) | (1 << cdbParser.T__4) | (1 << cdbParser.T__5) | (1 << cdbParser.T__6) | (1 << cdbParser.T__7) | (1 << cdbParser.T__8) | (1 << cdbParser.T__9) | (1 << cdbParser.T__16) | (1 << cdbParser.Auto) | (1 << cdbParser.Char) | (1 << cdbParser.Const) | (1 << cdbParser.Double) | (1 << cdbParser.Enum) | (1 << cdbParser.Extern) | (1 << cdbParser.Float) | (1 << cdbParser.Inline) | (1 << cdbParser.Int) | (1 << cdbParser.Long) | (1 << cdbParser.Register) | (1 << cdbParser.Restrict) | (1 << cdbParser.Short) | (1 << cdbParser.Signed) | (1 << cdbParser.Static) | (1 << cdbParser.Struct) | (1 << cdbParser.Typedef) | (1 << cdbParser.Union) | (1 << cdbParser.Unsigned) | (1 << cdbParser.Void) | (1 << cdbParser.Volatile))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (cdbParser.Alignas - 65)) | (1 << (cdbParser.Atomic - 65)) | (1 << (cdbParser.Bool - 65)) | (1 << (cdbParser.Complex - 65)) | (1 << (cdbParser.Noreturn - 65)) | (1 << (cdbParser.StaticAssert - 65)) | (1 << (cdbParser.ThreadLocal - 65)) | (1 << (cdbParser.Identifier - 65)))) != 0):
                self.state = 1154
                self.declarationList()


            self.state = 1157
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cdbParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(cdbParser.DeclarationContext,i)


        def getRuleIndex(self):
            return cdbParser.RULE_declarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationList" ):
                listener.enterDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationList" ):
                listener.exitDeclarationList(self)




    def declarationList(self):

        localctx = cdbParser.DeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_declarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1159
                self.declaration()
                self.state = 1162 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cdbParser.T__0) | (1 << cdbParser.T__3) | (1 << cdbParser.T__4) | (1 << cdbParser.T__5) | (1 << cdbParser.T__6) | (1 << cdbParser.T__7) | (1 << cdbParser.T__8) | (1 << cdbParser.T__9) | (1 << cdbParser.T__16) | (1 << cdbParser.Auto) | (1 << cdbParser.Char) | (1 << cdbParser.Const) | (1 << cdbParser.Double) | (1 << cdbParser.Enum) | (1 << cdbParser.Extern) | (1 << cdbParser.Float) | (1 << cdbParser.Inline) | (1 << cdbParser.Int) | (1 << cdbParser.Long) | (1 << cdbParser.Register) | (1 << cdbParser.Restrict) | (1 << cdbParser.Short) | (1 << cdbParser.Signed) | (1 << cdbParser.Static) | (1 << cdbParser.Struct) | (1 << cdbParser.Typedef) | (1 << cdbParser.Union) | (1 << cdbParser.Unsigned) | (1 << cdbParser.Void) | (1 << cdbParser.Volatile))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (cdbParser.Alignas - 65)) | (1 << (cdbParser.Atomic - 65)) | (1 << (cdbParser.Bool - 65)) | (1 << (cdbParser.Complex - 65)) | (1 << (cdbParser.Noreturn - 65)) | (1 << (cdbParser.StaticAssert - 65)) | (1 << (cdbParser.ThreadLocal - 65)) | (1 << (cdbParser.Identifier - 65)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[48] = self.directDeclarator_sempred
        self._predicates[63] = self.directAbstractDeclarator_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def directDeclarator_sempred(self, localctx:DirectDeclaratorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         

    def directAbstractDeclarator_sempred(self, localctx:DirectAbstractDeclaratorContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 1)
         




